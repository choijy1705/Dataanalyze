{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Titanic","provenance":[],"collapsed_sections":[],"toc_visible":true,"mount_file_id":"1lV6uT1LbKkiMm5DhX2NlM3w0h-QkyKnl","authorship_tag":"ABX9TyNTzpNita+YD7I01lwOzity"},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"code","metadata":{"id":"mS78lxBpFPc2","executionInfo":{"status":"ok","timestamp":1603250954414,"user_tz":-540,"elapsed":971,"user":{"displayName":"최준영","photoUrl":"","userId":"02012717858183245906"}},"outputId":"7af7f9c4-3b79-4082-cee5-c3e21fbe2c74","colab":{"base_uri":"https://localhost:8080/","height":16}},"source":["\"\"\"기본 모듈\"\"\"\n","import numpy as np               # For linear algebra\n","import pandas as pd              # For data manipulation\n","import matplotlib.pyplot as plt  # For 2D visualization\n","import seaborn as sns            \n","from scipy import stats          # For statistics\n","\n","\"\"\"시각화.\"\"\"\n","import plotly.graph_objs as go\n","from plotly.tools import make_subplots\n","from plotly.offline import iplot, init_notebook_mode\n","init_notebook_mode(connected = True) # Required to use plotly offline in jupyter notebook\n","\n","\"\"\"머신러닝\"\"\"\n","from sklearn.linear_model import LogisticRegression\n","from sklearn.svm import SVC\n","from sklearn.ensemble import RandomForestClassifier\n","from sklearn.neighbors import KNeighborsClassifier\n","from sklearn.naive_bayes import GaussianNB\n","from sklearn.tree import DecisionTreeClassifier\n","from sklearn.ensemble import GradientBoostingClassifier\n","from sklearn.ensemble import AdaBoostClassifier\n","from sklearn.ensemble import ExtraTreesClassifier\n","from xgboost import XGBClassifier\n","\n","\n","\"\"\"분류\"\"\"\n","from sklearn.metrics import accuracy_score\n","from sklearn.model_selection import cross_val_score\n","from sklearn.model_selection import GridSearchCV\n","from sklearn.model_selection import learning_curve\n","from sklearn.model_selection import cross_val_predict\n","from sklearn.metrics import precision_score\n","from sklearn.metrics import precision_score\n","from sklearn.metrics import recall_score\n","from sklearn.metrics import confusion_matrix\n","from sklearn.metrics import f1_score\n","from sklearn.metrics import classification_report\n","from sklearn.metrics import precision_recall_curve\n","from sklearn.metrics import roc_curve, roc_auc_score\n","\n","\n","\"\"\"앙상블\"\"\"\n","from mlxtend.classifier import EnsembleVoteClassifier\n","from sklearn.preprocessing import StandardScaler\n","from sklearn.decomposition import PCA\n","from mlxtend.plotting import plot_decision_regions\n","from sklearn.ensemble import BaggingClassifier\n","from mlens.ensemble import BlendEnsemble\n","from vecstack import stacking"],"execution_count":59,"outputs":[{"output_type":"display_data","data":{"text/html":["        <script type=\"text/javascript\">\n","        window.PlotlyConfig = {MathJaxConfig: 'local'};\n","        if (window.MathJax) {MathJax.Hub.Config({SVG: {font: \"STIX-Web\"}});}\n","        if (typeof require !== 'undefined') {\n","        require.undef(\"plotly\");\n","        requirejs.config({\n","            paths: {\n","                'plotly': ['https://cdn.plot.ly/plotly-latest.min']\n","            }\n","        });\n","        require(['plotly'], function(Plotly) {\n","            window._Plotly = Plotly;\n","        });\n","        }\n","        </script>\n","        "]},"metadata":{"tags":[]}}]},{"cell_type":"code","metadata":{"id":"llSKcT8xFaaN","executionInfo":{"status":"ok","timestamp":1603250954415,"user_tz":-540,"elapsed":962,"user":{"displayName":"최준영","photoUrl":"","userId":"02012717858183245906"}}},"source":["\"\"\"시각화 설정\"\"\"\n","plt.style.use(\"bmh\")                    # Use bmh's style for plotting\n","sns.set_style({\"axes.grid\":False})      # Remove gridlines\n","\n","\"\"\"마크다운 형태로 보여주기\"\"\"\n","from IPython.display import Markdown\n","def bold(string):\n","    return display(Markdown(f\"**{string}**\"))"],"execution_count":60,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"DK8Ww3NcKU6I"},"source":["### **1.Titanic 데이터 셋 불러오기**"]},{"cell_type":"code","metadata":{"id":"F5KPXgDuFTq4","executionInfo":{"status":"ok","timestamp":1603250954716,"user_tz":-540,"elapsed":1257,"user":{"displayName":"최준영","photoUrl":"","userId":"02012717858183245906"}},"outputId":"c1c65b05-f560-4dfd-8f58-a78e110e9fee","colab":{"base_uri":"https://localhost:8080/","height":436}},"source":["\"\"\"Train 데이터 셋\"\"\"\n","train = pd.read_csv(\"/content/drive/My Drive/Colab Notebooks/data/titanic/train.csv\")\n","bold(\"Train 데이터 셋\")\n","display(train.head())\n","\n","\"\"\"Test 데이터 셋\"\"\"\n","test = pd.read_csv(\"/content/drive/My Drive/Colab Notebooks/data/titanic/test.csv\")\n","bold(\"Test 데이터 셋\")\n","display(test.head())\n","\n","combine = [train, test]"],"execution_count":61,"outputs":[{"output_type":"display_data","data":{"text/markdown":"**Train 데이터 셋**","text/plain":["<IPython.core.display.Markdown object>"]},"metadata":{"tags":[]}},{"output_type":"display_data","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>PassengerId</th>\n","      <th>Survived</th>\n","      <th>Pclass</th>\n","      <th>Name</th>\n","      <th>Sex</th>\n","      <th>Age</th>\n","      <th>SibSp</th>\n","      <th>Parch</th>\n","      <th>Ticket</th>\n","      <th>Fare</th>\n","      <th>Cabin</th>\n","      <th>Embarked</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>Braund, Mr. Owen Harris</td>\n","      <td>male</td>\n","      <td>22.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>A/5 21171</td>\n","      <td>7.2500</td>\n","      <td>NaN</td>\n","      <td>S</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n","      <td>female</td>\n","      <td>38.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>PC 17599</td>\n","      <td>71.2833</td>\n","      <td>C85</td>\n","      <td>C</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>3</td>\n","      <td>1</td>\n","      <td>3</td>\n","      <td>Heikkinen, Miss. Laina</td>\n","      <td>female</td>\n","      <td>26.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>STON/O2. 3101282</td>\n","      <td>7.9250</td>\n","      <td>NaN</td>\n","      <td>S</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>4</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n","      <td>female</td>\n","      <td>35.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>113803</td>\n","      <td>53.1000</td>\n","      <td>C123</td>\n","      <td>S</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>5</td>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>Allen, Mr. William Henry</td>\n","      <td>male</td>\n","      <td>35.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>373450</td>\n","      <td>8.0500</td>\n","      <td>NaN</td>\n","      <td>S</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   PassengerId  Survived  Pclass  ...     Fare Cabin  Embarked\n","0            1         0       3  ...   7.2500   NaN         S\n","1            2         1       1  ...  71.2833   C85         C\n","2            3         1       3  ...   7.9250   NaN         S\n","3            4         1       1  ...  53.1000  C123         S\n","4            5         0       3  ...   8.0500   NaN         S\n","\n","[5 rows x 12 columns]"]},"metadata":{"tags":[]}},{"output_type":"display_data","data":{"text/markdown":"**Test 데이터 셋**","text/plain":["<IPython.core.display.Markdown object>"]},"metadata":{"tags":[]}},{"output_type":"display_data","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>PassengerId</th>\n","      <th>Pclass</th>\n","      <th>Name</th>\n","      <th>Sex</th>\n","      <th>Age</th>\n","      <th>SibSp</th>\n","      <th>Parch</th>\n","      <th>Ticket</th>\n","      <th>Fare</th>\n","      <th>Cabin</th>\n","      <th>Embarked</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>892</td>\n","      <td>3</td>\n","      <td>Kelly, Mr. James</td>\n","      <td>male</td>\n","      <td>34.5</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>330911</td>\n","      <td>7.8292</td>\n","      <td>NaN</td>\n","      <td>Q</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>893</td>\n","      <td>3</td>\n","      <td>Wilkes, Mrs. James (Ellen Needs)</td>\n","      <td>female</td>\n","      <td>47.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>363272</td>\n","      <td>7.0000</td>\n","      <td>NaN</td>\n","      <td>S</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>894</td>\n","      <td>2</td>\n","      <td>Myles, Mr. Thomas Francis</td>\n","      <td>male</td>\n","      <td>62.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>240276</td>\n","      <td>9.6875</td>\n","      <td>NaN</td>\n","      <td>Q</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>895</td>\n","      <td>3</td>\n","      <td>Wirz, Mr. Albert</td>\n","      <td>male</td>\n","      <td>27.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>315154</td>\n","      <td>8.6625</td>\n","      <td>NaN</td>\n","      <td>S</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>896</td>\n","      <td>3</td>\n","      <td>Hirvonen, Mrs. Alexander (Helga E Lindqvist)</td>\n","      <td>female</td>\n","      <td>22.0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>3101298</td>\n","      <td>12.2875</td>\n","      <td>NaN</td>\n","      <td>S</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   PassengerId  Pclass  ... Cabin Embarked\n","0          892       3  ...   NaN        Q\n","1          893       3  ...   NaN        S\n","2          894       2  ...   NaN        Q\n","3          895       3  ...   NaN        S\n","4          896       3  ...   NaN        S\n","\n","[5 rows x 11 columns]"]},"metadata":{"tags":[]}}]},{"cell_type":"code","metadata":{"id":"KG5d0g7wHP07","executionInfo":{"status":"ok","timestamp":1603250954717,"user_tz":-540,"elapsed":1251,"user":{"displayName":"최준영","photoUrl":"","userId":"02012717858183245906"}},"outputId":"18ac0558-6559-457b-e0e8-6573c6d0dace","colab":{"base_uri":"https://localhost:8080/","height":63}},"source":["bold(\"Train shape\")\n","train.shape"],"execution_count":62,"outputs":[{"output_type":"display_data","data":{"text/markdown":"**Train shape**","text/plain":["<IPython.core.display.Markdown object>"]},"metadata":{"tags":[]}},{"output_type":"execute_result","data":{"text/plain":["(891, 12)"]},"metadata":{"tags":[]},"execution_count":62}]},{"cell_type":"code","metadata":{"id":"vWToZmy0Mb-P","executionInfo":{"status":"ok","timestamp":1603250954717,"user_tz":-540,"elapsed":1243,"user":{"displayName":"최준영","photoUrl":"","userId":"02012717858183245906"}},"outputId":"4aeab8dc-8954-444f-afbd-336cb4d0c1a1","colab":{"base_uri":"https://localhost:8080/","height":63}},"source":["bold(\"Test shape\")\n","test.shape"],"execution_count":63,"outputs":[{"output_type":"display_data","data":{"text/markdown":"**Test shape**","text/plain":["<IPython.core.display.Markdown object>"]},"metadata":{"tags":[]}},{"output_type":"execute_result","data":{"text/plain":["(418, 11)"]},"metadata":{"tags":[]},"execution_count":63}]},{"cell_type":"code","metadata":{"id":"4DyEtWpkHdrd","executionInfo":{"status":"ok","timestamp":1603250954718,"user_tz":-540,"elapsed":1237,"user":{"displayName":"최준영","photoUrl":"","userId":"02012717858183245906"}},"outputId":"9e5bfe36-ad47-442e-e3ae-0fe396a37cc8","colab":{"base_uri":"https://localhost:8080/","height":98}},"source":["bold(\"Train 속성\")\n","train.columns"],"execution_count":64,"outputs":[{"output_type":"display_data","data":{"text/markdown":"**Train 속성**","text/plain":["<IPython.core.display.Markdown object>"]},"metadata":{"tags":[]}},{"output_type":"execute_result","data":{"text/plain":["Index(['PassengerId', 'Survived', 'Pclass', 'Name', 'Sex', 'Age', 'SibSp',\n","       'Parch', 'Ticket', 'Fare', 'Cabin', 'Embarked'],\n","      dtype='object')"]},"metadata":{"tags":[]},"execution_count":64}]},{"cell_type":"markdown","metadata":{"id":"XUj17-V3IOCA"},"source":["\n","\n","*   PassengerId : 승객 ID\n","*   Survived : 생존 여부(0 = No, 1=Yes)\n","* Pclass : 승객 등급\n","* Name : 승객 이름\n","* Sex : 승객 성별\n","* Sibsp : 배우자, 형제 자매\n","* Parch : 부모와 자식들\n","* Ticket : 티켓 번호\n","* Fare : 요금\n","* Cabin : 승객 객실 범주\n","* Embarked : 승객이 탑승한 항구\n","\n"]},{"cell_type":"markdown","metadata":{"id":"KgEX384ELRwM"},"source":["### 데이터 타입"]},{"cell_type":"code","metadata":{"id":"LOjZOWP3HoFN","executionInfo":{"status":"ok","timestamp":1603250954718,"user_tz":-540,"elapsed":1230,"user":{"displayName":"최준영","photoUrl":"","userId":"02012717858183245906"}},"outputId":"ca10c73d-ad02-41ac-a4b3-12318f4f19e4","colab":{"base_uri":"https://localhost:8080/","height":276}},"source":["bold(\"데이터 타입\")\n","train.dtypes"],"execution_count":65,"outputs":[{"output_type":"display_data","data":{"text/markdown":"**데이터 타입**","text/plain":["<IPython.core.display.Markdown object>"]},"metadata":{"tags":[]}},{"output_type":"execute_result","data":{"text/plain":["PassengerId      int64\n","Survived         int64\n","Pclass           int64\n","Name            object\n","Sex             object\n","Age            float64\n","SibSp            int64\n","Parch            int64\n","Ticket          object\n","Fare           float64\n","Cabin           object\n","Embarked        object\n","dtype: object"]},"metadata":{"tags":[]},"execution_count":65}]},{"cell_type":"code","metadata":{"id":"yXhd2Y0FNKZe","executionInfo":{"status":"ok","timestamp":1603250954719,"user_tz":-540,"elapsed":1223,"user":{"displayName":"최준영","photoUrl":"","userId":"02012717858183245906"}},"outputId":"f053c65c-762e-4887-e1ae-14b09c55e9b3","colab":{"base_uri":"https://localhost:8080/","height":276}},"source":["bold(\"Null값 확인\")\n","train.isnull().sum()"],"execution_count":66,"outputs":[{"output_type":"display_data","data":{"text/markdown":"**Null값 확인**","text/plain":["<IPython.core.display.Markdown object>"]},"metadata":{"tags":[]}},{"output_type":"execute_result","data":{"text/plain":["PassengerId      0\n","Survived         0\n","Pclass           0\n","Name             0\n","Sex              0\n","Age            177\n","SibSp            0\n","Parch            0\n","Ticket           0\n","Fare             0\n","Cabin          687\n","Embarked         2\n","dtype: int64"]},"metadata":{"tags":[]},"execution_count":66}]},{"cell_type":"code","metadata":{"id":"xdPk4bYUNPLA","executionInfo":{"status":"ok","timestamp":1603250955171,"user_tz":-540,"elapsed":1667,"user":{"displayName":"최준영","photoUrl":"","userId":"02012717858183245906"}},"outputId":"ed526508-0063-4c1f-be63-eb3071058a15","colab":{"base_uri":"https://localhost:8080/","height":435}},"source":["bold(\"Age null 값 확인\")\n","train[train['Age'].isnull()]"],"execution_count":67,"outputs":[{"output_type":"display_data","data":{"text/markdown":"**Age null 값 확인**","text/plain":["<IPython.core.display.Markdown object>"]},"metadata":{"tags":[]}},{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>PassengerId</th>\n","      <th>Survived</th>\n","      <th>Pclass</th>\n","      <th>Name</th>\n","      <th>Sex</th>\n","      <th>Age</th>\n","      <th>SibSp</th>\n","      <th>Parch</th>\n","      <th>Ticket</th>\n","      <th>Fare</th>\n","      <th>Cabin</th>\n","      <th>Embarked</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>5</th>\n","      <td>6</td>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>Moran, Mr. James</td>\n","      <td>male</td>\n","      <td>NaN</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>330877</td>\n","      <td>8.4583</td>\n","      <td>NaN</td>\n","      <td>Q</td>\n","    </tr>\n","    <tr>\n","      <th>17</th>\n","      <td>18</td>\n","      <td>1</td>\n","      <td>2</td>\n","      <td>Williams, Mr. Charles Eugene</td>\n","      <td>male</td>\n","      <td>NaN</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>244373</td>\n","      <td>13.0000</td>\n","      <td>NaN</td>\n","      <td>S</td>\n","    </tr>\n","    <tr>\n","      <th>19</th>\n","      <td>20</td>\n","      <td>1</td>\n","      <td>3</td>\n","      <td>Masselmani, Mrs. Fatima</td>\n","      <td>female</td>\n","      <td>NaN</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>2649</td>\n","      <td>7.2250</td>\n","      <td>NaN</td>\n","      <td>C</td>\n","    </tr>\n","    <tr>\n","      <th>26</th>\n","      <td>27</td>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>Emir, Mr. Farred Chehab</td>\n","      <td>male</td>\n","      <td>NaN</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>2631</td>\n","      <td>7.2250</td>\n","      <td>NaN</td>\n","      <td>C</td>\n","    </tr>\n","    <tr>\n","      <th>28</th>\n","      <td>29</td>\n","      <td>1</td>\n","      <td>3</td>\n","      <td>O'Dwyer, Miss. Ellen \"Nellie\"</td>\n","      <td>female</td>\n","      <td>NaN</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>330959</td>\n","      <td>7.8792</td>\n","      <td>NaN</td>\n","      <td>Q</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>859</th>\n","      <td>860</td>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>Razi, Mr. Raihed</td>\n","      <td>male</td>\n","      <td>NaN</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>2629</td>\n","      <td>7.2292</td>\n","      <td>NaN</td>\n","      <td>C</td>\n","    </tr>\n","    <tr>\n","      <th>863</th>\n","      <td>864</td>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>Sage, Miss. Dorothy Edith \"Dolly\"</td>\n","      <td>female</td>\n","      <td>NaN</td>\n","      <td>8</td>\n","      <td>2</td>\n","      <td>CA. 2343</td>\n","      <td>69.5500</td>\n","      <td>NaN</td>\n","      <td>S</td>\n","    </tr>\n","    <tr>\n","      <th>868</th>\n","      <td>869</td>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>van Melkebeke, Mr. Philemon</td>\n","      <td>male</td>\n","      <td>NaN</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>345777</td>\n","      <td>9.5000</td>\n","      <td>NaN</td>\n","      <td>S</td>\n","    </tr>\n","    <tr>\n","      <th>878</th>\n","      <td>879</td>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>Laleff, Mr. Kristo</td>\n","      <td>male</td>\n","      <td>NaN</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>349217</td>\n","      <td>7.8958</td>\n","      <td>NaN</td>\n","      <td>S</td>\n","    </tr>\n","    <tr>\n","      <th>888</th>\n","      <td>889</td>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>Johnston, Miss. Catherine Helen \"Carrie\"</td>\n","      <td>female</td>\n","      <td>NaN</td>\n","      <td>1</td>\n","      <td>2</td>\n","      <td>W./C. 6607</td>\n","      <td>23.4500</td>\n","      <td>NaN</td>\n","      <td>S</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>177 rows × 12 columns</p>\n","</div>"],"text/plain":["     PassengerId  Survived  Pclass  ...     Fare Cabin  Embarked\n","5              6         0       3  ...   8.4583   NaN         Q\n","17            18         1       2  ...  13.0000   NaN         S\n","19            20         1       3  ...   7.2250   NaN         C\n","26            27         0       3  ...   7.2250   NaN         C\n","28            29         1       3  ...   7.8792   NaN         Q\n","..           ...       ...     ...  ...      ...   ...       ...\n","859          860         0       3  ...   7.2292   NaN         C\n","863          864         0       3  ...  69.5500   NaN         S\n","868          869         0       3  ...   9.5000   NaN         S\n","878          879         0       3  ...   7.8958   NaN         S\n","888          889         0       3  ...  23.4500   NaN         S\n","\n","[177 rows x 12 columns]"]},"metadata":{"tags":[]},"execution_count":67}]},{"cell_type":"code","metadata":{"id":"1Xn0UVh-Ljcd","executionInfo":{"status":"ok","timestamp":1603250955172,"user_tz":-540,"elapsed":1662,"user":{"displayName":"최준영","photoUrl":"","userId":"02012717858183245906"}},"outputId":"814d95d2-bf92-4317-80b2-823f58a8acbf","colab":{"base_uri":"https://localhost:8080/","height":316}},"source":["bold(\"연속형 변수 Describe\")\n","train.describe()"],"execution_count":68,"outputs":[{"output_type":"display_data","data":{"text/markdown":"**연속형 변수 Describe**","text/plain":["<IPython.core.display.Markdown object>"]},"metadata":{"tags":[]}},{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>PassengerId</th>\n","      <th>Survived</th>\n","      <th>Pclass</th>\n","      <th>Age</th>\n","      <th>SibSp</th>\n","      <th>Parch</th>\n","      <th>Fare</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>count</th>\n","      <td>891.000000</td>\n","      <td>891.000000</td>\n","      <td>891.000000</td>\n","      <td>714.000000</td>\n","      <td>891.000000</td>\n","      <td>891.000000</td>\n","      <td>891.000000</td>\n","    </tr>\n","    <tr>\n","      <th>mean</th>\n","      <td>446.000000</td>\n","      <td>0.383838</td>\n","      <td>2.308642</td>\n","      <td>29.699118</td>\n","      <td>0.523008</td>\n","      <td>0.381594</td>\n","      <td>32.204208</td>\n","    </tr>\n","    <tr>\n","      <th>std</th>\n","      <td>257.353842</td>\n","      <td>0.486592</td>\n","      <td>0.836071</td>\n","      <td>14.526497</td>\n","      <td>1.102743</td>\n","      <td>0.806057</td>\n","      <td>49.693429</td>\n","    </tr>\n","    <tr>\n","      <th>min</th>\n","      <td>1.000000</td>\n","      <td>0.000000</td>\n","      <td>1.000000</td>\n","      <td>0.420000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>25%</th>\n","      <td>223.500000</td>\n","      <td>0.000000</td>\n","      <td>2.000000</td>\n","      <td>20.125000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>7.910400</td>\n","    </tr>\n","    <tr>\n","      <th>50%</th>\n","      <td>446.000000</td>\n","      <td>0.000000</td>\n","      <td>3.000000</td>\n","      <td>28.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>14.454200</td>\n","    </tr>\n","    <tr>\n","      <th>75%</th>\n","      <td>668.500000</td>\n","      <td>1.000000</td>\n","      <td>3.000000</td>\n","      <td>38.000000</td>\n","      <td>1.000000</td>\n","      <td>0.000000</td>\n","      <td>31.000000</td>\n","    </tr>\n","    <tr>\n","      <th>max</th>\n","      <td>891.000000</td>\n","      <td>1.000000</td>\n","      <td>3.000000</td>\n","      <td>80.000000</td>\n","      <td>8.000000</td>\n","      <td>6.000000</td>\n","      <td>512.329200</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["       PassengerId    Survived      Pclass  ...       SibSp       Parch        Fare\n","count   891.000000  891.000000  891.000000  ...  891.000000  891.000000  891.000000\n","mean    446.000000    0.383838    2.308642  ...    0.523008    0.381594   32.204208\n","std     257.353842    0.486592    0.836071  ...    1.102743    0.806057   49.693429\n","min       1.000000    0.000000    1.000000  ...    0.000000    0.000000    0.000000\n","25%     223.500000    0.000000    2.000000  ...    0.000000    0.000000    7.910400\n","50%     446.000000    0.000000    3.000000  ...    0.000000    0.000000   14.454200\n","75%     668.500000    1.000000    3.000000  ...    1.000000    0.000000   31.000000\n","max     891.000000    1.000000    3.000000  ...    8.000000    6.000000  512.329200\n","\n","[8 rows x 7 columns]"]},"metadata":{"tags":[]},"execution_count":68}]},{"cell_type":"code","metadata":{"id":"Gh-rAKpINEd2","executionInfo":{"status":"ok","timestamp":1603250955172,"user_tz":-540,"elapsed":1655,"user":{"displayName":"최준영","photoUrl":"","userId":"02012717858183245906"}},"outputId":"8c072740-997e-4984-88fd-cb34b1375548","colab":{"base_uri":"https://localhost:8080/","height":196}},"source":["bold(\"범주형 변수 Describe\")\n","train.describe(include=['O'])"],"execution_count":69,"outputs":[{"output_type":"display_data","data":{"text/markdown":"**범주형 변수 Describe**","text/plain":["<IPython.core.display.Markdown object>"]},"metadata":{"tags":[]}},{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Name</th>\n","      <th>Sex</th>\n","      <th>Ticket</th>\n","      <th>Cabin</th>\n","      <th>Embarked</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>count</th>\n","      <td>891</td>\n","      <td>891</td>\n","      <td>891</td>\n","      <td>204</td>\n","      <td>889</td>\n","    </tr>\n","    <tr>\n","      <th>unique</th>\n","      <td>891</td>\n","      <td>2</td>\n","      <td>681</td>\n","      <td>147</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>top</th>\n","      <td>Asplund, Mrs. Carl Oscar (Selma Augusta Emilia...</td>\n","      <td>male</td>\n","      <td>347082</td>\n","      <td>G6</td>\n","      <td>S</td>\n","    </tr>\n","    <tr>\n","      <th>freq</th>\n","      <td>1</td>\n","      <td>577</td>\n","      <td>7</td>\n","      <td>4</td>\n","      <td>644</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["                                                     Name   Sex  ... Cabin Embarked\n","count                                                 891   891  ...   204      889\n","unique                                                891     2  ...   147        3\n","top     Asplund, Mrs. Carl Oscar (Selma Augusta Emilia...  male  ...    G6        S\n","freq                                                    1   577  ...     4      644\n","\n","[4 rows x 5 columns]"]},"metadata":{"tags":[]},"execution_count":69}]},{"cell_type":"code","metadata":{"id":"Na-fEU21O4IJ","executionInfo":{"status":"ok","timestamp":1603250955172,"user_tz":-540,"elapsed":1648,"user":{"displayName":"최준영","photoUrl":"","userId":"02012717858183245906"}},"outputId":"60d3b922-7e17-49f5-e3dd-f4a0a230cfa0","colab":{"base_uri":"https://localhost:8080/","height":196}},"source":["bold(\"승객 등급에 따른 생존율\")\n","train[['Pclass','Survived']].groupby('Pclass').mean().sort_values(by = 'Survived', ascending=False)"],"execution_count":70,"outputs":[{"output_type":"display_data","data":{"text/markdown":"**승객 등급에 따른 생존율**","text/plain":["<IPython.core.display.Markdown object>"]},"metadata":{"tags":[]}},{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Survived</th>\n","    </tr>\n","    <tr>\n","      <th>Pclass</th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>1</th>\n","      <td>0.629630</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>0.472826</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>0.242363</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["        Survived\n","Pclass          \n","1       0.629630\n","2       0.472826\n","3       0.242363"]},"metadata":{"tags":[]},"execution_count":70}]},{"cell_type":"code","metadata":{"id":"Obqzi_OzPc-t","executionInfo":{"status":"ok","timestamp":1603250955173,"user_tz":-540,"elapsed":1642,"user":{"displayName":"최준영","photoUrl":"","userId":"02012717858183245906"}},"outputId":"49fc1bf0-2eba-4e40-8f05-792e7ec59983","colab":{"base_uri":"https://localhost:8080/","height":166}},"source":["bold(\"성별에 따른 생존율\")\n","train[['Sex','Survived']].groupby('Sex').mean().sort_values(by = 'Survived', ascending=False)"],"execution_count":71,"outputs":[{"output_type":"display_data","data":{"text/markdown":"**성별에 따른 생존율**","text/plain":["<IPython.core.display.Markdown object>"]},"metadata":{"tags":[]}},{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Survived</th>\n","    </tr>\n","    <tr>\n","      <th>Sex</th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>female</th>\n","      <td>0.742038</td>\n","    </tr>\n","    <tr>\n","      <th>male</th>\n","      <td>0.188908</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["        Survived\n","Sex             \n","female  0.742038\n","male    0.188908"]},"metadata":{"tags":[]},"execution_count":71}]},{"cell_type":"code","metadata":{"id":"v-vujqWsPy0b","executionInfo":{"status":"ok","timestamp":1603250955173,"user_tz":-540,"elapsed":1636,"user":{"displayName":"최준영","photoUrl":"","userId":"02012717858183245906"}},"outputId":"3341315f-1766-493a-a79b-9a9229e5fd98","colab":{"base_uri":"https://localhost:8080/","height":316}},"source":["bold(\"배우자, 형제자매에 따른 생존율\")\n","train[['SibSp','Survived']].groupby('SibSp').mean().sort_values(by = 'Survived', ascending=False)"],"execution_count":72,"outputs":[{"output_type":"display_data","data":{"text/markdown":"**배우자, 형제자매에 따른 생존율**","text/plain":["<IPython.core.display.Markdown object>"]},"metadata":{"tags":[]}},{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Survived</th>\n","    </tr>\n","    <tr>\n","      <th>SibSp</th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>1</th>\n","      <td>0.535885</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>0.464286</td>\n","    </tr>\n","    <tr>\n","      <th>0</th>\n","      <td>0.345395</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>0.250000</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>0.166667</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>8</th>\n","      <td>0.000000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["       Survived\n","SibSp          \n","1      0.535885\n","2      0.464286\n","0      0.345395\n","3      0.250000\n","4      0.166667\n","5      0.000000\n","8      0.000000"]},"metadata":{"tags":[]},"execution_count":72}]},{"cell_type":"code","metadata":{"id":"46dlASNxQEub","executionInfo":{"status":"ok","timestamp":1603250955174,"user_tz":-540,"elapsed":1630,"user":{"displayName":"최준영","photoUrl":"","userId":"02012717858183245906"}},"outputId":"b44f9346-9839-4ca5-d07b-558941f085b7","colab":{"base_uri":"https://localhost:8080/","height":316}},"source":["bold(\"부모님, 자식들에 따른 생존율\")\n","train[['Parch', 'Survived']].groupby('Parch').mean().sort_values(by = 'Parch', ascending=False)"],"execution_count":73,"outputs":[{"output_type":"display_data","data":{"text/markdown":"**부모님, 자식들에 따른 생존율**","text/plain":["<IPython.core.display.Markdown object>"]},"metadata":{"tags":[]}},{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Survived</th>\n","    </tr>\n","    <tr>\n","      <th>Parch</th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>6</th>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>0.200000</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>0.600000</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>0.500000</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>0.550847</td>\n","    </tr>\n","    <tr>\n","      <th>0</th>\n","      <td>0.343658</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["       Survived\n","Parch          \n","6      0.000000\n","5      0.200000\n","4      0.000000\n","3      0.600000\n","2      0.500000\n","1      0.550847\n","0      0.343658"]},"metadata":{"tags":[]},"execution_count":73}]},{"cell_type":"markdown","metadata":{"id":"zmVd7e1cDgUe"},"source":["## Analyze by visualizing data\n","Now we can continue confirming some of our assumptions using visualizations for analyzing the data.\n","\n","## Correlating numerical features\n","Let us start by understanding correlations between numerical features and our solution goal (Survived).\n","\n","A histogram chart is useful for analyzing continous numerical variables like Age where banding or ranges will help identify useful patterns. The histogram can indicate distribution of samples using automatically defined bins or equally ranged bands. This helps us answer questions relating to specific bands (Did infants have better survival rate?)\n","\n","Note that x-axis in historgram visualizations represents the count of samples or passengers.\n","\n","### Observations.\n","\n","* Infants (Age <=4) had high survival rate.\n","* Oldest passengers (Age = 80) survived.\n","* Large number of 15-25 year olds did not survive.\n","*Most passengers are in 15-35 age range.\n","\n","### Decisions.\n","\n","This simple analysis confirms our assumptions as decisions for subsequent workflow stages.\n","\n","* We should consider Age (our assumption classifying #2) in our model training.\n","* Complete the Age feature for null values (completing #1).\n","* We should band age groups (creating #3)."]},{"cell_type":"code","metadata":{"id":"yGK_nsnsQjhM","executionInfo":{"status":"ok","timestamp":1603250955779,"user_tz":-540,"elapsed":2227,"user":{"displayName":"최준영","photoUrl":"","userId":"02012717858183245906"}},"outputId":"a6c3f242-df4f-427a-c55c-ce774641fe42","colab":{"base_uri":"https://localhost:8080/","height":384}},"source":["g = sns.FacetGrid(train, col = 'Survived')\n","g.map(plt.hist, 'Age', bins = 20)"],"execution_count":74,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/numpy/lib/histograms.py:839: RuntimeWarning:\n","\n","invalid value encountered in greater_equal\n","\n","/usr/local/lib/python3.6/dist-packages/numpy/lib/histograms.py:840: RuntimeWarning:\n","\n","invalid value encountered in less_equal\n","\n"],"name":"stderr"},{"output_type":"execute_result","data":{"text/plain":["<seaborn.axisgrid.FacetGrid at 0x7ff132c95748>"]},"metadata":{"tags":[]},"execution_count":74},{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x216 with 2 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"iNRlOueODOQ4"},"source":["### Correlating numerical and ordinal features\n","We can combine multiple features for identifying correlations using a single plot. This can be done with numerical and categorical features which have numeric values.\n","\n","## Observations.\n","\n","* Pclass=3 had most passengers, however most did not survive. Confirms our classifying assumption #2.\n","* Infant passengers in Pclass=2 and Pclass=3 mostly survived. Further qualifies our classifying assumption #2.\n","* Most passengers in Pclass=1 survived. Confirms our classifying assumption #3.\n","Pclass varies in terms of Age distribution of passengers.\n","\n","## Decisions.\n","\n","* Consider Pclass for model training."]},{"cell_type":"code","metadata":{"id":"Ltbgy6cm7rgv","executionInfo":{"status":"ok","timestamp":1603250958700,"user_tz":-540,"elapsed":5141,"user":{"displayName":"최준영","photoUrl":"","userId":"02012717858183245906"}},"outputId":"67aea3c7-e51f-4cce-c8d5-e173ba364730","colab":{"base_uri":"https://localhost:8080/","height":816}},"source":["grid = sns.FacetGrid(train, col='Survived',row = 'Pclass', height = 3, aspect = 1.6)\n","grid.map(plt.hist,'Age', alpha = .5, bins = 20)\n","grid.add_legend()"],"execution_count":75,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/numpy/lib/histograms.py:839: RuntimeWarning:\n","\n","invalid value encountered in greater_equal\n","\n","/usr/local/lib/python3.6/dist-packages/numpy/lib/histograms.py:840: RuntimeWarning:\n","\n","invalid value encountered in less_equal\n","\n"],"name":"stderr"},{"output_type":"execute_result","data":{"text/plain":["<seaborn.axisgrid.FacetGrid at 0x7ff132006cf8>"]},"metadata":{"tags":[]},"execution_count":75},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 699.2x648 with 6 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"9606wdRlAkx0"},"source":["## Correlating categorical features\n","Now we can correlate categorical features with our solution goal.\n","\n","### Observations.\n","\n","* Female passengers had much better survival rate than males. Confirms classifying (#1).\n","* Exception in Embarked=C where males had higher survival rate. This could be a correlation between Pclass and Embarked and in turn Pclass and Survived, not necessarily direct correlation between Embarked and Survived.\n","* Males had better survival rate in Pclass=3 when compared with Pclass=2 for C and Q ports. Completing (#2).\n","* Ports of embarkation have varying survival rates for Pclass=3 and among male passengers. Correlating (#1).\n","\n","### Decisions.\n","\n","* Add Sex feature to model training.\n","* Complete and add Embarked feature to model training."]},{"cell_type":"code","metadata":{"id":"BQhNXBQW_x8H","executionInfo":{"status":"ok","timestamp":1603250959913,"user_tz":-540,"elapsed":6347,"user":{"displayName":"최준영","photoUrl":"","userId":"02012717858183245906"}},"outputId":"4ad3d738-9329-4898-cb1e-32e00898482a","colab":{"base_uri":"https://localhost:8080/","height":816}},"source":["grid = sns.FacetGrid(train, row='Embarked', height =3, aspect = 1.6)\n","grid.map(sns.pointplot, \"Pclass\", 'Survived', 'Sex', palette = 'deep')\n","grid.add_legend()"],"execution_count":76,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/seaborn/axisgrid.py:645: UserWarning:\n","\n","Using the pointplot function without specifying `order` is likely to produce an incorrect plot.\n","\n","/usr/local/lib/python3.6/dist-packages/seaborn/axisgrid.py:650: UserWarning:\n","\n","Using the pointplot function without specifying `hue_order` is likely to produce an incorrect plot.\n","\n"],"name":"stderr"},{"output_type":"execute_result","data":{"text/plain":["<seaborn.axisgrid.FacetGrid at 0x7ff131a7cc18>"]},"metadata":{"tags":[]},"execution_count":76},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 416.1x648 with 3 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"FZKSld2cBiiN"},"source":["## Correlating categorical and numerical features\n","We may also want to correlate categorical features (with non-numeric values) and numeric features. We can consider correlating Embarked (Categorical non-numeric), Sex (Categorical non-numeric), Fare (Numeric continuous), with Survived (Categorical numeric).\n","\n","### Observations.\n","\n","* Higher fare paying passengers had better survival. Confirms our assumption for creating (#4) fare ranges.\n","* Port of embarkation correlates with survival rates. Confirms correlating (#1) and completing (#2).\n","### Decisions.\n","\n","* Consider banding Fare feature."]},{"cell_type":"code","metadata":{"id":"16VR4d1KBV0S","executionInfo":{"status":"ok","timestamp":1603250961216,"user_tz":-540,"elapsed":7644,"user":{"displayName":"최준영","photoUrl":"","userId":"02012717858183245906"}},"outputId":"fc8082f5-2b08-479c-aefb-35dc2a146783","colab":{"base_uri":"https://localhost:8080/","height":745}},"source":["grid = sns.FacetGrid(train, row = 'Embarked', col = 'Survived', height =3, aspect = 1.6  )\n","grid.map(sns.barplot, 'Sex', 'Fare', alpha=.5, ci=None)\n","grid.add_legend()"],"execution_count":77,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/seaborn/axisgrid.py:645: UserWarning:\n","\n","Using the barplot function without specifying `order` is likely to produce an incorrect plot.\n","\n"],"name":"stderr"},{"output_type":"execute_result","data":{"text/plain":["<seaborn.axisgrid.FacetGrid at 0x7ff1318c84a8>"]},"metadata":{"tags":[]},"execution_count":77},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 699.2x648 with 6 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"markdown","metadata":{"id":"PZceJkrwD-nJ"},"source":["## Wrangle data¶\n","We have collected several assumptions and decisions regarding our datasets and solution requirements. So far we did not have to change a single feature or value to arrive at these. Let us now execute our decisions and assumptions for correcting, creating, and completing goals.\n","\n","### Correcting by dropping features\n","This is a good starting goal to execute. By dropping features we are dealing with fewer data points. Speeds up our notebook and eases the analysis.\n","\n","Based on our assumptions and decisions we want to drop the Cabin (correcting #2) and Ticket (correcting #1) features.\n","\n","Note that where applicable we perform operations on both training and testing datasets together to stay consistent."]},{"cell_type":"code","metadata":{"id":"s88YGwpSHHa7","executionInfo":{"status":"ok","timestamp":1603250961216,"user_tz":-540,"elapsed":7636,"user":{"displayName":"최준영","photoUrl":"","userId":"02012717858183245906"}},"outputId":"61791e8b-a5ca-4ae8-b88d-b16459f702c9","colab":{"base_uri":"https://localhost:8080/","height":197}},"source":["train.head()"],"execution_count":78,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>PassengerId</th>\n","      <th>Survived</th>\n","      <th>Pclass</th>\n","      <th>Name</th>\n","      <th>Sex</th>\n","      <th>Age</th>\n","      <th>SibSp</th>\n","      <th>Parch</th>\n","      <th>Ticket</th>\n","      <th>Fare</th>\n","      <th>Cabin</th>\n","      <th>Embarked</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>Braund, Mr. Owen Harris</td>\n","      <td>male</td>\n","      <td>22.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>A/5 21171</td>\n","      <td>7.2500</td>\n","      <td>NaN</td>\n","      <td>S</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n","      <td>female</td>\n","      <td>38.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>PC 17599</td>\n","      <td>71.2833</td>\n","      <td>C85</td>\n","      <td>C</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>3</td>\n","      <td>1</td>\n","      <td>3</td>\n","      <td>Heikkinen, Miss. Laina</td>\n","      <td>female</td>\n","      <td>26.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>STON/O2. 3101282</td>\n","      <td>7.9250</td>\n","      <td>NaN</td>\n","      <td>S</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>4</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n","      <td>female</td>\n","      <td>35.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>113803</td>\n","      <td>53.1000</td>\n","      <td>C123</td>\n","      <td>S</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>5</td>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>Allen, Mr. William Henry</td>\n","      <td>male</td>\n","      <td>35.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>373450</td>\n","      <td>8.0500</td>\n","      <td>NaN</td>\n","      <td>S</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   PassengerId  Survived  Pclass  ...     Fare Cabin  Embarked\n","0            1         0       3  ...   7.2500   NaN         S\n","1            2         1       1  ...  71.2833   C85         C\n","2            3         1       3  ...   7.9250   NaN         S\n","3            4         1       1  ...  53.1000  C123         S\n","4            5         0       3  ...   8.0500   NaN         S\n","\n","[5 rows x 12 columns]"]},"metadata":{"tags":[]},"execution_count":78}]},{"cell_type":"code","metadata":{"id":"oHvdVE7FCuMu","executionInfo":{"status":"ok","timestamp":1603250961217,"user_tz":-540,"elapsed":7635,"user":{"displayName":"최준영","photoUrl":"","userId":"02012717858183245906"}}},"source":["train = train.drop(['Ticket', 'Cabin'], axis=1)\n","test = test.drop(['Ticket', 'Cabin'], axis = 1)\n","combine = [train, test]\n","\n"],"execution_count":79,"outputs":[]},{"cell_type":"code","metadata":{"id":"NSPMfffnGygg","executionInfo":{"status":"ok","timestamp":1603250961218,"user_tz":-540,"elapsed":7628,"user":{"displayName":"최준영","photoUrl":"","userId":"02012717858183245906"}},"outputId":"cff1c0a5-7703-4b5e-81c5-e99b41fdc7ad","colab":{"base_uri":"https://localhost:8080/","height":34}},"source":["train.shape, test.shape, combine[0].shape, combine[1].shape"],"execution_count":80,"outputs":[{"output_type":"execute_result","data":{"text/plain":["((891, 10), (418, 9), (891, 10), (418, 9))"]},"metadata":{"tags":[]},"execution_count":80}]},{"cell_type":"markdown","metadata":{"id":"9dS7OIo3He4U"},"source":["## Creating new feature extracting from existing\n","We want to analyze if Name feature can be engineered to extract titles and test correlation between titles and survival, before dropping Name and PassengerId features.\n","\n","In the following code we extract Title feature using regular expressions. The RegEx pattern (\\w+\\.) matches the first word which ends with a dot character within Name feature. The expand=False flag returns a DataFrame.\n","\n","### Observations.\n","\n","When we plot Title, Age, and Survived, we note the following observations.\n","\n","* Most titles band Age groups accurately. For example: Master title has Age mean of 5 years.\n","* Survival among Title Age bands varies slightly.\n","* Certain titles mostly survived (Mme, Lady, Sir) or did not (Don, Rev, Jonkheer).\n","Decision.\n","\n","We decide to retain the new Title feature for model training."]},{"cell_type":"code","metadata":{"id":"lnsHaXk9HT0j","executionInfo":{"status":"ok","timestamp":1603250961218,"user_tz":-540,"elapsed":7621,"user":{"displayName":"최준영","photoUrl":"","userId":"02012717858183245906"}},"outputId":"458b6adf-dc81-49d8-e506-18bfb741b973","colab":{"base_uri":"https://localhost:8080/","height":197}},"source":["train.head()"],"execution_count":81,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>PassengerId</th>\n","      <th>Survived</th>\n","      <th>Pclass</th>\n","      <th>Name</th>\n","      <th>Sex</th>\n","      <th>Age</th>\n","      <th>SibSp</th>\n","      <th>Parch</th>\n","      <th>Fare</th>\n","      <th>Embarked</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>Braund, Mr. Owen Harris</td>\n","      <td>male</td>\n","      <td>22.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>7.2500</td>\n","      <td>S</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n","      <td>female</td>\n","      <td>38.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>71.2833</td>\n","      <td>C</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>3</td>\n","      <td>1</td>\n","      <td>3</td>\n","      <td>Heikkinen, Miss. Laina</td>\n","      <td>female</td>\n","      <td>26.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>7.9250</td>\n","      <td>S</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>4</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n","      <td>female</td>\n","      <td>35.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>53.1000</td>\n","      <td>S</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>5</td>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>Allen, Mr. William Henry</td>\n","      <td>male</td>\n","      <td>35.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>8.0500</td>\n","      <td>S</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   PassengerId  Survived  Pclass  ... Parch     Fare  Embarked\n","0            1         0       3  ...     0   7.2500         S\n","1            2         1       1  ...     0  71.2833         C\n","2            3         1       3  ...     0   7.9250         S\n","3            4         1       1  ...     0  53.1000         S\n","4            5         0       3  ...     0   8.0500         S\n","\n","[5 rows x 10 columns]"]},"metadata":{"tags":[]},"execution_count":81}]},{"cell_type":"code","metadata":{"id":"8cGpo_4VI5Md","executionInfo":{"status":"ok","timestamp":1603250961219,"user_tz":-540,"elapsed":7617,"user":{"displayName":"최준영","photoUrl":"","userId":"02012717858183245906"}},"outputId":"06b016ee-5441-40c6-a198-d0371f06269b","colab":{"base_uri":"https://localhost:8080/","height":587}},"source":["for dataset in combine:\n","  dataset['Title'] = dataset.Name.str.extract('([A-Za-z]+)\\.', expand=False)\n","\n","pd.crosstab(train['Title'], train['Sex'])"],"execution_count":82,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th>Sex</th>\n","      <th>female</th>\n","      <th>male</th>\n","    </tr>\n","    <tr>\n","      <th>Title</th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>Capt</th>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>Col</th>\n","      <td>0</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>Countess</th>\n","      <td>1</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>Don</th>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>Dr</th>\n","      <td>1</td>\n","      <td>6</td>\n","    </tr>\n","    <tr>\n","      <th>Jonkheer</th>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>Lady</th>\n","      <td>1</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>Major</th>\n","      <td>0</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>Master</th>\n","      <td>0</td>\n","      <td>40</td>\n","    </tr>\n","    <tr>\n","      <th>Miss</th>\n","      <td>182</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>Mlle</th>\n","      <td>2</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>Mme</th>\n","      <td>1</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>Mr</th>\n","      <td>0</td>\n","      <td>517</td>\n","    </tr>\n","    <tr>\n","      <th>Mrs</th>\n","      <td>125</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>Ms</th>\n","      <td>1</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>Rev</th>\n","      <td>0</td>\n","      <td>6</td>\n","    </tr>\n","    <tr>\n","      <th>Sir</th>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["Sex       female  male\n","Title                 \n","Capt           0     1\n","Col            0     2\n","Countess       1     0\n","Don            0     1\n","Dr             1     6\n","Jonkheer       0     1\n","Lady           1     0\n","Major          0     2\n","Master         0    40\n","Miss         182     0\n","Mlle           2     0\n","Mme            1     0\n","Mr             0   517\n","Mrs          125     0\n","Ms             1     0\n","Rev            0     6\n","Sir            0     1"]},"metadata":{"tags":[]},"execution_count":82}]},{"cell_type":"code","metadata":{"id":"215ldjUFJaNS","executionInfo":{"status":"ok","timestamp":1603250961219,"user_tz":-540,"elapsed":7611,"user":{"displayName":"최준영","photoUrl":"","userId":"02012717858183245906"}},"outputId":"7684944b-52c5-4655-c0ed-9c0c3f14beee","colab":{"base_uri":"https://localhost:8080/","height":197}},"source":["for dataset in combine:\n","    dataset['Title'] = dataset['Title'].replace(['Lady', 'Countess','Capt', 'Col','Don', 'Dr', 'Major', 'Rev', 'Sir', 'Jonkheer', 'Dona'], 'Rare')\n","\n","    dataset['Title'] = dataset['Title'].replace('Mlle', 'Miss')\n","    dataset['Title'] = dataset['Title'].replace('Ms', 'Miss')\n","    dataset['Title'] = dataset['Title'].replace('Mme', 'Mrs')\n","\n","train[['Title','Survived']].groupby(['Title'], as_index=False).mean()"],"execution_count":83,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Title</th>\n","      <th>Survived</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Master</td>\n","      <td>0.575000</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>Miss</td>\n","      <td>0.702703</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>Mr</td>\n","      <td>0.156673</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>Mrs</td>\n","      <td>0.793651</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>Rare</td>\n","      <td>0.347826</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["    Title  Survived\n","0  Master  0.575000\n","1    Miss  0.702703\n","2      Mr  0.156673\n","3     Mrs  0.793651\n","4    Rare  0.347826"]},"metadata":{"tags":[]},"execution_count":83}]},{"cell_type":"markdown","metadata":{"id":"n1e6UDUJNMjI"},"source":["We can convert the categorical titles to ordinal."]},{"cell_type":"code","metadata":{"id":"g7omQinWMfFO","executionInfo":{"status":"ok","timestamp":1603251527481,"user_tz":-540,"elapsed":781,"user":{"displayName":"최준영","photoUrl":"","userId":"02012717858183245906"}},"outputId":"770c6666-d1b2-4fff-bc35-b167ca732096","colab":{"base_uri":"https://localhost:8080/","height":197}},"source":["title_mapping = {\"Mr\":1, \"Miss\":2, \"Mrs\":3, \"Master\":4,\"Rare\":5}\n","for dataset in combine:\n","  dataset['Title'] = dataset['Title'].map(title_mapping)\n","  dataset['Title'] = dataset.fillna(0)\n","\n","train.head()"],"execution_count":85,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>PassengerId</th>\n","      <th>Survived</th>\n","      <th>Pclass</th>\n","      <th>Name</th>\n","      <th>Sex</th>\n","      <th>Age</th>\n","      <th>SibSp</th>\n","      <th>Parch</th>\n","      <th>Fare</th>\n","      <th>Embarked</th>\n","      <th>Title</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>Braund, Mr. Owen Harris</td>\n","      <td>male</td>\n","      <td>22.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>7.2500</td>\n","      <td>S</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n","      <td>female</td>\n","      <td>38.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>71.2833</td>\n","      <td>C</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>3</td>\n","      <td>1</td>\n","      <td>3</td>\n","      <td>Heikkinen, Miss. Laina</td>\n","      <td>female</td>\n","      <td>26.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>7.9250</td>\n","      <td>S</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>4</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n","      <td>female</td>\n","      <td>35.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>53.1000</td>\n","      <td>S</td>\n","      <td>4</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>5</td>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>Allen, Mr. William Henry</td>\n","      <td>male</td>\n","      <td>35.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>8.0500</td>\n","      <td>S</td>\n","      <td>5</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   PassengerId  Survived  Pclass  ...     Fare Embarked  Title\n","0            1         0       3  ...   7.2500        S      1\n","1            2         1       1  ...  71.2833        C      2\n","2            3         1       3  ...   7.9250        S      3\n","3            4         1       1  ...  53.1000        S      4\n","4            5         0       3  ...   8.0500        S      5\n","\n","[5 rows x 11 columns]"]},"metadata":{"tags":[]},"execution_count":85}]},{"cell_type":"markdown","metadata":{"id":"xtEVdS5xPdKk"},"source":["Now we can safely drop the Name feature from training and testing datasets. We also do not need the PassengerId feature in the training dataset."]},{"cell_type":"code","metadata":{"id":"5WpmJZYqLsyv","executionInfo":{"status":"ok","timestamp":1603250961517,"user_tz":-540,"elapsed":7901,"user":{"displayName":"최준영","photoUrl":"","userId":"02012717858183245906"}}},"source":["train = train.drop()"],"execution_count":84,"outputs":[]}]}