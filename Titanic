{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Titanic","provenance":[],"collapsed_sections":[],"toc_visible":true,"mount_file_id":"1lV6uT1LbKkiMm5DhX2NlM3w0h-QkyKnl","authorship_tag":"ABX9TyMBqCEepi57cPA0BtQDSABN"},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"code","metadata":{"id":"mS78lxBpFPc2","executionInfo":{"status":"ok","timestamp":1606117545424,"user_tz":-540,"elapsed":898,"user":{"displayName":"최준영","photoUrl":"","userId":"02012717858183245906"}}},"source":["# data analysis and wrangling\n","import pandas as pd\n","import numpy as np\n","import random as rnd\n","\n","# visualization\n","import seaborn as sns\n","import matplotlib.pyplot as plt\n","%matplotlib inline\n","\n","# machine learning\n","from sklearn.linear_model import LogisticRegression\n","from sklearn.svm import SVC, LinearSVC\n","from sklearn.ensemble import RandomForestClassifier\n","from sklearn.neighbors import KNeighborsClassifier\n","from sklearn.naive_bayes import GaussianNB\n","from sklearn.linear_model import Perceptron\n","from sklearn.linear_model import SGDClassifier\n","from sklearn.tree import DecisionTreeClassifier"],"execution_count":50,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"DK8Ww3NcKU6I"},"source":["### **1.Titanic 데이터 셋 불러오기**"]},{"cell_type":"code","metadata":{"id":"F5KPXgDuFTq4","executionInfo":{"status":"ok","timestamp":1606117545810,"user_tz":-540,"elapsed":1278,"user":{"displayName":"최준영","photoUrl":"","userId":"02012717858183245906"}}},"source":["train_df = pd.read_csv(\"/content/drive/My Drive/Colab Notebooks/data/titanic/train.csv\")\n","test_df = pd.read_csv(\"/content/drive/My Drive/Colab Notebooks/data/titanic/test.csv\")\n","combine = [train_df, test_df]"],"execution_count":51,"outputs":[]},{"cell_type":"code","metadata":{"id":"KG5d0g7wHP07","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1606117545810,"user_tz":-540,"elapsed":1271,"user":{"displayName":"최준영","photoUrl":"","userId":"02012717858183245906"}},"outputId":"a51904a2-a13b-4ab4-d862-ba63de5bafc9"},"source":["train_df.shape"],"execution_count":52,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(891, 12)"]},"metadata":{"tags":[]},"execution_count":52}]},{"cell_type":"code","metadata":{"id":"vWToZmy0Mb-P","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1606117545811,"user_tz":-540,"elapsed":1264,"user":{"displayName":"최준영","photoUrl":"","userId":"02012717858183245906"}},"outputId":"7125a977-ffcf-4045-a919-6a61b760a4d8"},"source":["test_df.shape"],"execution_count":53,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(418, 11)"]},"metadata":{"tags":[]},"execution_count":53}]},{"cell_type":"code","metadata":{"id":"4DyEtWpkHdrd","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1606117545811,"user_tz":-540,"elapsed":1255,"user":{"displayName":"최준영","photoUrl":"","userId":"02012717858183245906"}},"outputId":"cff63b5a-46d8-4b2c-d2d0-9176d2146df4"},"source":["train_df.columns.values"],"execution_count":54,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array(['PassengerId', 'Survived', 'Pclass', 'Name', 'Sex', 'Age', 'SibSp',\n","       'Parch', 'Ticket', 'Fare', 'Cabin', 'Embarked'], dtype=object)"]},"metadata":{"tags":[]},"execution_count":54}]},{"cell_type":"code","metadata":{"id":"LOjZOWP3HoFN","colab":{"base_uri":"https://localhost:8080/","height":197},"executionInfo":{"status":"ok","timestamp":1606117545812,"user_tz":-540,"elapsed":1246,"user":{"displayName":"최준영","photoUrl":"","userId":"02012717858183245906"}},"outputId":"4a188be4-e11a-4f3a-9a94-5802fcc9a0c3"},"source":["train_df.head()"],"execution_count":55,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>PassengerId</th>\n","      <th>Survived</th>\n","      <th>Pclass</th>\n","      <th>Name</th>\n","      <th>Sex</th>\n","      <th>Age</th>\n","      <th>SibSp</th>\n","      <th>Parch</th>\n","      <th>Ticket</th>\n","      <th>Fare</th>\n","      <th>Cabin</th>\n","      <th>Embarked</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>Braund, Mr. Owen Harris</td>\n","      <td>male</td>\n","      <td>22.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>A/5 21171</td>\n","      <td>7.2500</td>\n","      <td>NaN</td>\n","      <td>S</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n","      <td>female</td>\n","      <td>38.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>PC 17599</td>\n","      <td>71.2833</td>\n","      <td>C85</td>\n","      <td>C</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>3</td>\n","      <td>1</td>\n","      <td>3</td>\n","      <td>Heikkinen, Miss. Laina</td>\n","      <td>female</td>\n","      <td>26.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>STON/O2. 3101282</td>\n","      <td>7.9250</td>\n","      <td>NaN</td>\n","      <td>S</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>4</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n","      <td>female</td>\n","      <td>35.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>113803</td>\n","      <td>53.1000</td>\n","      <td>C123</td>\n","      <td>S</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>5</td>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>Allen, Mr. William Henry</td>\n","      <td>male</td>\n","      <td>35.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>373450</td>\n","      <td>8.0500</td>\n","      <td>NaN</td>\n","      <td>S</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   PassengerId  Survived  Pclass  ...     Fare Cabin  Embarked\n","0            1         0       3  ...   7.2500   NaN         S\n","1            2         1       1  ...  71.2833   C85         C\n","2            3         1       3  ...   7.9250   NaN         S\n","3            4         1       1  ...  53.1000  C123         S\n","4            5         0       3  ...   8.0500   NaN         S\n","\n","[5 rows x 12 columns]"]},"metadata":{"tags":[]},"execution_count":55}]},{"cell_type":"code","metadata":{"id":"yXhd2Y0FNKZe","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1606117545812,"user_tz":-540,"elapsed":1237,"user":{"displayName":"최준영","photoUrl":"","userId":"02012717858183245906"}},"outputId":"62367bef-d0cc-4d64-f67e-1fd07d58f591"},"source":["train_df.info()"],"execution_count":56,"outputs":[{"output_type":"stream","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 891 entries, 0 to 890\n","Data columns (total 12 columns):\n"," #   Column       Non-Null Count  Dtype  \n","---  ------       --------------  -----  \n"," 0   PassengerId  891 non-null    int64  \n"," 1   Survived     891 non-null    int64  \n"," 2   Pclass       891 non-null    int64  \n"," 3   Name         891 non-null    object \n"," 4   Sex          891 non-null    object \n"," 5   Age          714 non-null    float64\n"," 6   SibSp        891 non-null    int64  \n"," 7   Parch        891 non-null    int64  \n"," 8   Ticket       891 non-null    object \n"," 9   Fare         891 non-null    float64\n"," 10  Cabin        204 non-null    object \n"," 11  Embarked     889 non-null    object \n","dtypes: float64(2), int64(5), object(5)\n","memory usage: 83.7+ KB\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"xdPk4bYUNPLA","colab":{"base_uri":"https://localhost:8080/","height":287},"executionInfo":{"status":"ok","timestamp":1606117545812,"user_tz":-540,"elapsed":1228,"user":{"displayName":"최준영","photoUrl":"","userId":"02012717858183245906"}},"outputId":"f74d2ec3-414d-4139-a999-463b218cd018"},"source":["train_df.describe()"],"execution_count":57,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>PassengerId</th>\n","      <th>Survived</th>\n","      <th>Pclass</th>\n","      <th>Age</th>\n","      <th>SibSp</th>\n","      <th>Parch</th>\n","      <th>Fare</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>count</th>\n","      <td>891.000000</td>\n","      <td>891.000000</td>\n","      <td>891.000000</td>\n","      <td>714.000000</td>\n","      <td>891.000000</td>\n","      <td>891.000000</td>\n","      <td>891.000000</td>\n","    </tr>\n","    <tr>\n","      <th>mean</th>\n","      <td>446.000000</td>\n","      <td>0.383838</td>\n","      <td>2.308642</td>\n","      <td>29.699118</td>\n","      <td>0.523008</td>\n","      <td>0.381594</td>\n","      <td>32.204208</td>\n","    </tr>\n","    <tr>\n","      <th>std</th>\n","      <td>257.353842</td>\n","      <td>0.486592</td>\n","      <td>0.836071</td>\n","      <td>14.526497</td>\n","      <td>1.102743</td>\n","      <td>0.806057</td>\n","      <td>49.693429</td>\n","    </tr>\n","    <tr>\n","      <th>min</th>\n","      <td>1.000000</td>\n","      <td>0.000000</td>\n","      <td>1.000000</td>\n","      <td>0.420000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>25%</th>\n","      <td>223.500000</td>\n","      <td>0.000000</td>\n","      <td>2.000000</td>\n","      <td>20.125000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>7.910400</td>\n","    </tr>\n","    <tr>\n","      <th>50%</th>\n","      <td>446.000000</td>\n","      <td>0.000000</td>\n","      <td>3.000000</td>\n","      <td>28.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>14.454200</td>\n","    </tr>\n","    <tr>\n","      <th>75%</th>\n","      <td>668.500000</td>\n","      <td>1.000000</td>\n","      <td>3.000000</td>\n","      <td>38.000000</td>\n","      <td>1.000000</td>\n","      <td>0.000000</td>\n","      <td>31.000000</td>\n","    </tr>\n","    <tr>\n","      <th>max</th>\n","      <td>891.000000</td>\n","      <td>1.000000</td>\n","      <td>3.000000</td>\n","      <td>80.000000</td>\n","      <td>8.000000</td>\n","      <td>6.000000</td>\n","      <td>512.329200</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["       PassengerId    Survived      Pclass  ...       SibSp       Parch        Fare\n","count   891.000000  891.000000  891.000000  ...  891.000000  891.000000  891.000000\n","mean    446.000000    0.383838    2.308642  ...    0.523008    0.381594   32.204208\n","std     257.353842    0.486592    0.836071  ...    1.102743    0.806057   49.693429\n","min       1.000000    0.000000    1.000000  ...    0.000000    0.000000    0.000000\n","25%     223.500000    0.000000    2.000000  ...    0.000000    0.000000    7.910400\n","50%     446.000000    0.000000    3.000000  ...    0.000000    0.000000   14.454200\n","75%     668.500000    1.000000    3.000000  ...    1.000000    0.000000   31.000000\n","max     891.000000    1.000000    3.000000  ...    8.000000    6.000000  512.329200\n","\n","[8 rows x 7 columns]"]},"metadata":{"tags":[]},"execution_count":57}]},{"cell_type":"code","metadata":{"id":"1Xn0UVh-Ljcd","colab":{"base_uri":"https://localhost:8080/","height":167},"executionInfo":{"status":"ok","timestamp":1606117545813,"user_tz":-540,"elapsed":1219,"user":{"displayName":"최준영","photoUrl":"","userId":"02012717858183245906"}},"outputId":"0162e156-7d6c-4bd3-c51a-249749b385e7"},"source":["train_df.describe(include=[\"O\"])"],"execution_count":58,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Name</th>\n","      <th>Sex</th>\n","      <th>Ticket</th>\n","      <th>Cabin</th>\n","      <th>Embarked</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>count</th>\n","      <td>891</td>\n","      <td>891</td>\n","      <td>891</td>\n","      <td>204</td>\n","      <td>889</td>\n","    </tr>\n","    <tr>\n","      <th>unique</th>\n","      <td>891</td>\n","      <td>2</td>\n","      <td>681</td>\n","      <td>147</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>top</th>\n","      <td>Najib, Miss. Adele Kiamie \"Jane\"</td>\n","      <td>male</td>\n","      <td>1601</td>\n","      <td>G6</td>\n","      <td>S</td>\n","    </tr>\n","    <tr>\n","      <th>freq</th>\n","      <td>1</td>\n","      <td>577</td>\n","      <td>7</td>\n","      <td>4</td>\n","      <td>644</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["                                    Name   Sex Ticket Cabin Embarked\n","count                                891   891    891   204      889\n","unique                               891     2    681   147        3\n","top     Najib, Miss. Adele Kiamie \"Jane\"  male   1601    G6        S\n","freq                                   1   577      7     4      644"]},"metadata":{"tags":[]},"execution_count":58}]},{"cell_type":"code","metadata":{"id":"Gh-rAKpINEd2","colab":{"base_uri":"https://localhost:8080/","height":167},"executionInfo":{"status":"ok","timestamp":1606117546142,"user_tz":-540,"elapsed":1540,"user":{"displayName":"최준영","photoUrl":"","userId":"02012717858183245906"}},"outputId":"9e67e56b-3fcb-4a4a-9f7c-8c79288bbef2"},"source":["train_df.describe(include=['O'])"],"execution_count":59,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Name</th>\n","      <th>Sex</th>\n","      <th>Ticket</th>\n","      <th>Cabin</th>\n","      <th>Embarked</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>count</th>\n","      <td>891</td>\n","      <td>891</td>\n","      <td>891</td>\n","      <td>204</td>\n","      <td>889</td>\n","    </tr>\n","    <tr>\n","      <th>unique</th>\n","      <td>891</td>\n","      <td>2</td>\n","      <td>681</td>\n","      <td>147</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>top</th>\n","      <td>Najib, Miss. Adele Kiamie \"Jane\"</td>\n","      <td>male</td>\n","      <td>1601</td>\n","      <td>G6</td>\n","      <td>S</td>\n","    </tr>\n","    <tr>\n","      <th>freq</th>\n","      <td>1</td>\n","      <td>577</td>\n","      <td>7</td>\n","      <td>4</td>\n","      <td>644</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["                                    Name   Sex Ticket Cabin Embarked\n","count                                891   891    891   204      889\n","unique                               891     2    681   147        3\n","top     Najib, Miss. Adele Kiamie \"Jane\"  male   1601    G6        S\n","freq                                   1   577      7     4      644"]},"metadata":{"tags":[]},"execution_count":59}]},{"cell_type":"code","metadata":{"id":"Na-fEU21O4IJ","colab":{"base_uri":"https://localhost:8080/","height":137},"executionInfo":{"status":"ok","timestamp":1606117546143,"user_tz":-540,"elapsed":1531,"user":{"displayName":"최준영","photoUrl":"","userId":"02012717858183245906"}},"outputId":"0dbe3886-f209-4b8b-b2a6-026501986091"},"source":["train_df[['Pclass','Survived']].groupby(['Pclass'], as_index = False).mean().sort_values(by='Survived', ascending=False)"],"execution_count":60,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Pclass</th>\n","      <th>Survived</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1</td>\n","      <td>0.629630</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2</td>\n","      <td>0.472826</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>3</td>\n","      <td>0.242363</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   Pclass  Survived\n","0       1  0.629630\n","1       2  0.472826\n","2       3  0.242363"]},"metadata":{"tags":[]},"execution_count":60}]},{"cell_type":"code","metadata":{"id":"Obqzi_OzPc-t","colab":{"base_uri":"https://localhost:8080/","height":107},"executionInfo":{"status":"ok","timestamp":1606117546143,"user_tz":-540,"elapsed":1522,"user":{"displayName":"최준영","photoUrl":"","userId":"02012717858183245906"}},"outputId":"bda42e23-2230-4286-ead1-060b245cd014"},"source":["train_df[[\"Sex\", \"Survived\"]].groupby(['Sex'], as_index=False).mean().sort_values(by='Survived', ascending=False)"],"execution_count":61,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Sex</th>\n","      <th>Survived</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>female</td>\n","      <td>0.742038</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>male</td>\n","      <td>0.188908</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["      Sex  Survived\n","0  female  0.742038\n","1    male  0.188908"]},"metadata":{"tags":[]},"execution_count":61}]},{"cell_type":"code","metadata":{"id":"v-vujqWsPy0b","colab":{"base_uri":"https://localhost:8080/","height":257},"executionInfo":{"status":"ok","timestamp":1606117546144,"user_tz":-540,"elapsed":1514,"user":{"displayName":"최준영","photoUrl":"","userId":"02012717858183245906"}},"outputId":"2c5d5eaa-523d-4018-9162-f29d5f2092b6"},"source":["train_df[[\"SibSp\", \"Survived\"]].groupby(['SibSp'], as_index=False).mean().sort_values(by='Survived', ascending=False)"],"execution_count":62,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>SibSp</th>\n","      <th>Survived</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>1</th>\n","      <td>1</td>\n","      <td>0.535885</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2</td>\n","      <td>0.464286</td>\n","    </tr>\n","    <tr>\n","      <th>0</th>\n","      <td>0</td>\n","      <td>0.345395</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>3</td>\n","      <td>0.250000</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>4</td>\n","      <td>0.166667</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>5</td>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>8</td>\n","      <td>0.000000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   SibSp  Survived\n","1      1  0.535885\n","2      2  0.464286\n","0      0  0.345395\n","3      3  0.250000\n","4      4  0.166667\n","5      5  0.000000\n","6      8  0.000000"]},"metadata":{"tags":[]},"execution_count":62}]},{"cell_type":"code","metadata":{"id":"46dlASNxQEub","colab":{"base_uri":"https://localhost:8080/","height":257},"executionInfo":{"status":"ok","timestamp":1606117546144,"user_tz":-540,"elapsed":1504,"user":{"displayName":"최준영","photoUrl":"","userId":"02012717858183245906"}},"outputId":"9b4b3e86-02b1-4024-daeb-e674ea5ea738"},"source":["train_df[[\"Parch\", \"Survived\"]].groupby(['Parch'], as_index=False).mean().sort_values(by='Survived', ascending=False)"],"execution_count":63,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Parch</th>\n","      <th>Survived</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>3</th>\n","      <td>3</td>\n","      <td>0.600000</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1</td>\n","      <td>0.550847</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2</td>\n","      <td>0.500000</td>\n","    </tr>\n","    <tr>\n","      <th>0</th>\n","      <td>0</td>\n","      <td>0.343658</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>5</td>\n","      <td>0.200000</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>4</td>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>6</td>\n","      <td>0.000000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   Parch  Survived\n","3      3  0.600000\n","1      1  0.550847\n","2      2  0.500000\n","0      0  0.343658\n","5      5  0.200000\n","4      4  0.000000\n","6      6  0.000000"]},"metadata":{"tags":[]},"execution_count":63}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":313},"id":"bgRvqjZb6gjb","executionInfo":{"status":"ok","timestamp":1606117546817,"user_tz":-540,"elapsed":2167,"user":{"displayName":"최준영","photoUrl":"","userId":"02012717858183245906"}},"outputId":"4f0c7284-4fcf-4874-eb3c-f8bcfc4384db"},"source":["g = sns.FacetGrid(train_df, col='Survived')\n","g.map(plt.hist, 'Age', bins=20)"],"execution_count":64,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/numpy/lib/histograms.py:839: RuntimeWarning: invalid value encountered in greater_equal\n","  keep = (tmp_a >= first_edge)\n","/usr/local/lib/python3.6/dist-packages/numpy/lib/histograms.py:840: RuntimeWarning: invalid value encountered in less_equal\n","  keep &= (tmp_a <= last_edge)\n"],"name":"stderr"},{"output_type":"execute_result","data":{"text/plain":["<seaborn.axisgrid.FacetGrid at 0x7fd96f40ceb8>"]},"metadata":{"tags":[]},"execution_count":64},{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x216 with 2 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":745},"id":"lMuJC6O37kr7","executionInfo":{"status":"ok","timestamp":1606117549605,"user_tz":-540,"elapsed":4946,"user":{"displayName":"최준영","photoUrl":"","userId":"02012717858183245906"}},"outputId":"03b04d3c-3c6a-4d37-aa96-ff306f1105bf"},"source":["grid = sns.FacetGrid(train_df, col='Survived', row='Pclass')\n","grid.map(plt.hist, 'Age', alpha=0.5, bins=20)\n","grid.add_legend()"],"execution_count":65,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/numpy/lib/histograms.py:839: RuntimeWarning: invalid value encountered in greater_equal\n","  keep = (tmp_a >= first_edge)\n","/usr/local/lib/python3.6/dist-packages/numpy/lib/histograms.py:840: RuntimeWarning: invalid value encountered in less_equal\n","  keep &= (tmp_a <= last_edge)\n"],"name":"stderr"},{"output_type":"execute_result","data":{"text/plain":["<seaborn.axisgrid.FacetGrid at 0x7fd96f332278>"]},"metadata":{"tags":[]},"execution_count":65},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 440x648 with 6 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":608},"id":"5ulzgxYc8aX-","executionInfo":{"status":"ok","timestamp":1606117551069,"user_tz":-540,"elapsed":6401,"user":{"displayName":"최준영","photoUrl":"","userId":"02012717858183245906"}},"outputId":"9e451722-e5bd-4960-f4c0-29e56d701ebf"},"source":["  grid = sns.FacetGrid(train_df, row='Embarked', size=2.2, aspect=1.6)\n","  grid.map(sns.pointplot, 'Pclass','Survived','Sex', palette='deep')\n","  grid.add_legend()"],"execution_count":66,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/seaborn/axisgrid.py:316: UserWarning: The `size` parameter has been renamed to `height`; please update your code.\n","  warnings.warn(msg, UserWarning)\n","/usr/local/lib/python3.6/dist-packages/seaborn/axisgrid.py:645: UserWarning: Using the pointplot function without specifying `order` is likely to produce an incorrect plot.\n","  warnings.warn(warning)\n","/usr/local/lib/python3.6/dist-packages/seaborn/axisgrid.py:650: UserWarning: Using the pointplot function without specifying `hue_order` is likely to produce an incorrect plot.\n","  warnings.warn(warning)\n"],"name":"stderr"},{"output_type":"execute_result","data":{"text/plain":["<seaborn.axisgrid.FacetGrid at 0x7fd96f0a2358>"]},"metadata":{"tags":[]},"execution_count":66},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 323.94x475.2 with 3 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":573},"id":"RCZQrV4x9jxk","executionInfo":{"status":"ok","timestamp":1606117552562,"user_tz":-540,"elapsed":7885,"user":{"displayName":"최준영","photoUrl":"","userId":"02012717858183245906"}},"outputId":"cc4ff1dd-57fd-4765-8328-6ec1348938bd"},"source":["grid = sns.FacetGrid(train_df, row='Embarked', col='Survived', size=2.2, aspect=1.6)\n","grid.map(sns.barplot, 'Sex', 'Fare', alpha=.5, ci=None)\n","grid.add_legend()"],"execution_count":67,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/seaborn/axisgrid.py:316: UserWarning: The `size` parameter has been renamed to `height`; please update your code.\n","  warnings.warn(msg, UserWarning)\n","/usr/local/lib/python3.6/dist-packages/seaborn/axisgrid.py:645: UserWarning: Using the barplot function without specifying `order` is likely to produce an incorrect plot.\n","  warnings.warn(warning)\n"],"name":"stderr"},{"output_type":"execute_result","data":{"text/plain":["<seaborn.axisgrid.FacetGrid at 0x7fd96ef31ba8>"]},"metadata":{"tags":[]},"execution_count":67},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 514.88x475.2 with 6 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"BThJepXT_WUy","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1606117552563,"user_tz":-540,"elapsed":7875,"user":{"displayName":"최준영","photoUrl":"","userId":"02012717858183245906"}},"outputId":"9b41692f-5d02-4430-e721-3cf27b8b505b"},"source":["print(\"Before\", train_df.shape, test_df.shape, combine[0].shape, combine[1].shape)\n","\n","train_df = train_df.drop(['Ticket', 'Cabin'], axis = 1)\n","test_df = test_df.drop(['Ticket', 'Cabin'], axis = 1)\n","combine = [train_df, test_df]\n","\n","print(\"After\",train_df.shape, test_df.shape, combine[0].shape, combine[1].shape)"],"execution_count":68,"outputs":[{"output_type":"stream","text":["Before (891, 12) (418, 11) (891, 12) (418, 11)\n","After (891, 10) (418, 9) (891, 10) (418, 9)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":587},"id":"8or2HemEEG7Q","executionInfo":{"status":"ok","timestamp":1606117552564,"user_tz":-540,"elapsed":7864,"user":{"displayName":"최준영","photoUrl":"","userId":"02012717858183245906"}},"outputId":"77e3f899-72c9-460c-def6-e3cb3a2572b1"},"source":["for dataset in combine:\n","  dataset['Title'] = dataset.Name.str.extract('([A-Za-z]+)\\.', expand=False)\n","\n","pd.crosstab(train_df['Title'], train_df['Sex'])"],"execution_count":69,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th>Sex</th>\n","      <th>female</th>\n","      <th>male</th>\n","    </tr>\n","    <tr>\n","      <th>Title</th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>Capt</th>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>Col</th>\n","      <td>0</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>Countess</th>\n","      <td>1</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>Don</th>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>Dr</th>\n","      <td>1</td>\n","      <td>6</td>\n","    </tr>\n","    <tr>\n","      <th>Jonkheer</th>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>Lady</th>\n","      <td>1</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>Major</th>\n","      <td>0</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>Master</th>\n","      <td>0</td>\n","      <td>40</td>\n","    </tr>\n","    <tr>\n","      <th>Miss</th>\n","      <td>182</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>Mlle</th>\n","      <td>2</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>Mme</th>\n","      <td>1</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>Mr</th>\n","      <td>0</td>\n","      <td>517</td>\n","    </tr>\n","    <tr>\n","      <th>Mrs</th>\n","      <td>125</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>Ms</th>\n","      <td>1</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>Rev</th>\n","      <td>0</td>\n","      <td>6</td>\n","    </tr>\n","    <tr>\n","      <th>Sir</th>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["Sex       female  male\n","Title                 \n","Capt           0     1\n","Col            0     2\n","Countess       1     0\n","Don            0     1\n","Dr             1     6\n","Jonkheer       0     1\n","Lady           1     0\n","Major          0     2\n","Master         0    40\n","Miss         182     0\n","Mlle           2     0\n","Mme            1     0\n","Mr             0   517\n","Mrs          125     0\n","Ms             1     0\n","Rev            0     6\n","Sir            0     1"]},"metadata":{"tags":[]},"execution_count":69}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":257},"id":"6jNQT0xPF3Wr","executionInfo":{"status":"ok","timestamp":1606117552564,"user_tz":-540,"elapsed":7849,"user":{"displayName":"최준영","photoUrl":"","userId":"02012717858183245906"}},"outputId":"7778a2de-5aa5-4366-f254-7117aa987b34"},"source":["for dataset in combine:\n","  dataset['Title'] = dataset['Title'].replace(['Lady', 'Countess', 'Capt', 'Col', 'Don','Dr', 'Major', 'Rev', 'Sir', 'Jonkeer', 'Dona'], 'Rare')\n","  dataset['Title'] = dataset['Title'].replace('Mlle', 'Miss')\n","  dataset['Title'] = dataset['Title'].replace('Mme', 'Mrs')\n","\n","train_df[['Title', 'Survived']].groupby(['Title'], as_index=False).mean()"],"execution_count":70,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Title</th>\n","      <th>Survived</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Jonkheer</td>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>Master</td>\n","      <td>0.575000</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>Miss</td>\n","      <td>0.701087</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>Mr</td>\n","      <td>0.156673</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>Mrs</td>\n","      <td>0.793651</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>Ms</td>\n","      <td>1.000000</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>Rare</td>\n","      <td>0.363636</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["      Title  Survived\n","0  Jonkheer  0.000000\n","1    Master  0.575000\n","2      Miss  0.701087\n","3        Mr  0.156673\n","4       Mrs  0.793651\n","5        Ms  1.000000\n","6      Rare  0.363636"]},"metadata":{"tags":[]},"execution_count":70}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":197},"id":"xvZur-lqI78H","executionInfo":{"status":"ok","timestamp":1606117552564,"user_tz":-540,"elapsed":7839,"user":{"displayName":"최준영","photoUrl":"","userId":"02012717858183245906"}},"outputId":"dea6e2dc-f7be-4605-d791-f6fba11287b2"},"source":["title_mapping = {\"Mr\": 1, \"Miss\" : 2, \"Mrs\":3, \"Master\":4, \"Rare\":5}\n","for dataset in combine:\n","  dataset['Title'] = dataset['Title'].map(title_mapping)\n","  dataset['Title'] = dataset['Title'].fillna(0)\n","\n","train_df.head()"],"execution_count":71,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>PassengerId</th>\n","      <th>Survived</th>\n","      <th>Pclass</th>\n","      <th>Name</th>\n","      <th>Sex</th>\n","      <th>Age</th>\n","      <th>SibSp</th>\n","      <th>Parch</th>\n","      <th>Fare</th>\n","      <th>Embarked</th>\n","      <th>Title</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>Braund, Mr. Owen Harris</td>\n","      <td>male</td>\n","      <td>22.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>7.2500</td>\n","      <td>S</td>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n","      <td>female</td>\n","      <td>38.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>71.2833</td>\n","      <td>C</td>\n","      <td>3.0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>3</td>\n","      <td>1</td>\n","      <td>3</td>\n","      <td>Heikkinen, Miss. Laina</td>\n","      <td>female</td>\n","      <td>26.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>7.9250</td>\n","      <td>S</td>\n","      <td>2.0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>4</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n","      <td>female</td>\n","      <td>35.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>53.1000</td>\n","      <td>S</td>\n","      <td>3.0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>5</td>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>Allen, Mr. William Henry</td>\n","      <td>male</td>\n","      <td>35.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>8.0500</td>\n","      <td>S</td>\n","      <td>1.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   PassengerId  Survived  Pclass  ...     Fare Embarked  Title\n","0            1         0       3  ...   7.2500        S    1.0\n","1            2         1       1  ...  71.2833        C    3.0\n","2            3         1       3  ...   7.9250        S    2.0\n","3            4         1       1  ...  53.1000        S    3.0\n","4            5         0       3  ...   8.0500        S    1.0\n","\n","[5 rows x 11 columns]"]},"metadata":{"tags":[]},"execution_count":71}]},{"cell_type":"code","metadata":{"id":"EXNNFC4ZLDOM","executionInfo":{"status":"ok","timestamp":1606117552565,"user_tz":-540,"elapsed":7832,"user":{"displayName":"최준영","photoUrl":"","userId":"02012717858183245906"}}},"source":["train_df['Title'] = train_df['Title'].astype(int)"],"execution_count":72,"outputs":[]},{"cell_type":"code","metadata":{"id":"6-1eBva_LNl0","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1606117552566,"user_tz":-540,"elapsed":7826,"user":{"displayName":"최준영","photoUrl":"","userId":"02012717858183245906"}},"outputId":"e2a30990-d5c4-4880-cdcf-68d551e64dc1"},"source":["train_df = train_df.drop(['Name', 'PassengerId'], axis = 1)\n","test_df = test_df.drop(['Name'], axis=1)\n","combine = [train_df, test_df]\n","\n","train_df.shape, test_df.shape"],"execution_count":73,"outputs":[{"output_type":"execute_result","data":{"text/plain":["((891, 9), (418, 9))"]},"metadata":{"tags":[]},"execution_count":73}]},{"cell_type":"code","metadata":{"id":"SeDxnboFOOA9","colab":{"base_uri":"https://localhost:8080/","height":197},"executionInfo":{"status":"ok","timestamp":1606117552567,"user_tz":-540,"elapsed":7817,"user":{"displayName":"최준영","photoUrl":"","userId":"02012717858183245906"}},"outputId":"12a03647-93df-47f7-8b86-2fa2e3949071"},"source":["for dataset in combine:\n","  dataset['Sex'] = dataset['Sex'].map({'female' : 1, 'male' : 0}).astype(int)\n","\n","train_df.head()"],"execution_count":74,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Survived</th>\n","      <th>Pclass</th>\n","      <th>Sex</th>\n","      <th>Age</th>\n","      <th>SibSp</th>\n","      <th>Parch</th>\n","      <th>Fare</th>\n","      <th>Embarked</th>\n","      <th>Title</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>0</td>\n","      <td>22.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>7.2500</td>\n","      <td>S</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>38.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>71.2833</td>\n","      <td>C</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>1</td>\n","      <td>3</td>\n","      <td>1</td>\n","      <td>26.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>7.9250</td>\n","      <td>S</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>35.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>53.1000</td>\n","      <td>S</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>0</td>\n","      <td>35.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>8.0500</td>\n","      <td>S</td>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   Survived  Pclass  Sex   Age  SibSp  Parch     Fare Embarked  Title\n","0         0       3    0  22.0      1      0   7.2500        S      1\n","1         1       1    1  38.0      1      0  71.2833        C      3\n","2         1       3    1  26.0      0      0   7.9250        S      2\n","3         1       1    1  35.0      1      0  53.1000        S      3\n","4         0       3    0  35.0      0      0   8.0500        S      1"]},"metadata":{"tags":[]},"execution_count":74}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":197},"id":"2-pwN1RbOwqC","executionInfo":{"status":"ok","timestamp":1606117552568,"user_tz":-540,"elapsed":7809,"user":{"displayName":"최준영","photoUrl":"","userId":"02012717858183245906"}},"outputId":"d21a7884-f7f5-4a9b-d5bd-6476e19ec429"},"source":["train_df.head()"],"execution_count":75,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Survived</th>\n","      <th>Pclass</th>\n","      <th>Sex</th>\n","      <th>Age</th>\n","      <th>SibSp</th>\n","      <th>Parch</th>\n","      <th>Fare</th>\n","      <th>Embarked</th>\n","      <th>Title</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>0</td>\n","      <td>22.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>7.2500</td>\n","      <td>S</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>38.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>71.2833</td>\n","      <td>C</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>1</td>\n","      <td>3</td>\n","      <td>1</td>\n","      <td>26.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>7.9250</td>\n","      <td>S</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>35.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>53.1000</td>\n","      <td>S</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>0</td>\n","      <td>35.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>8.0500</td>\n","      <td>S</td>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   Survived  Pclass  Sex   Age  SibSp  Parch     Fare Embarked  Title\n","0         0       3    0  22.0      1      0   7.2500        S      1\n","1         1       1    1  38.0      1      0  71.2833        C      3\n","2         1       3    1  26.0      0      0   7.9250        S      2\n","3         1       1    1  35.0      1      0  53.1000        S      3\n","4         0       3    0  35.0      0      0   8.0500        S      1"]},"metadata":{"tags":[]},"execution_count":75}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":608},"id":"RUgrqYAbPG3Z","executionInfo":{"status":"ok","timestamp":1606117555292,"user_tz":-540,"elapsed":10524,"user":{"displayName":"최준영","photoUrl":"","userId":"02012717858183245906"}},"outputId":"4558bdff-9b49-4423-af9c-6a7d62e1175d"},"source":["grid = sns.FacetGrid(train_df, row='Pclass', col='Sex', size=2.2, aspect=1.6)\n","grid.map(plt.hist, 'Age', alpha = .5, bins=20)\n","grid.add_legend()"],"execution_count":76,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/seaborn/axisgrid.py:316: UserWarning: The `size` parameter has been renamed to `height`; please update your code.\n","  warnings.warn(msg, UserWarning)\n","/usr/local/lib/python3.6/dist-packages/numpy/lib/histograms.py:839: RuntimeWarning: invalid value encountered in greater_equal\n","  keep = (tmp_a >= first_edge)\n","/usr/local/lib/python3.6/dist-packages/numpy/lib/histograms.py:840: RuntimeWarning: invalid value encountered in less_equal\n","  keep &= (tmp_a <= last_edge)\n"],"name":"stderr"},{"output_type":"execute_result","data":{"text/plain":["<seaborn.axisgrid.FacetGrid at 0x7fd96ecd5eb8>"]},"metadata":{"tags":[]},"execution_count":76},{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 514.88x475.2 with 6 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"m31fq0yBTdpM","executionInfo":{"status":"ok","timestamp":1606117555293,"user_tz":-540,"elapsed":10516,"user":{"displayName":"최준영","photoUrl":"","userId":"02012717858183245906"}},"outputId":"7dc20e35-a893-4491-a41f-72c6667c7a12"},"source":["guess_ages = np.zeros((2,3))\n","guess_ages"],"execution_count":77,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[0., 0., 0.],\n","       [0., 0., 0.]])"]},"metadata":{"tags":[]},"execution_count":77}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":197},"id":"P2vcIELnUnd1","executionInfo":{"status":"ok","timestamp":1606117555294,"user_tz":-540,"elapsed":10508,"user":{"displayName":"최준영","photoUrl":"","userId":"02012717858183245906"}},"outputId":"7ab200e2-3b37-431c-aab3-f4259e8dd59a"},"source":["for dataset in combine:\n","  for i in range(0,2):\n","    for j in range(0,3):\n","      guess_df = dataset[(dataset['Sex']==i) & (dataset['Pclass']== j+1)]['Age'].dropna()\n","\n","      \n","      age_guess = guess_df.median()\n","\n","      guess_ages[i,j] = int(age_guess/0.5 + 0.5) + 0.5\n","\n","  for i in range(0,2):\n","    for j in range(0,3):\n","      dataset.loc[(dataset.Age.isnull()) & (dataset.Sex == i) & (dataset.Pclass == j+1), 'Age'] = guess_ages[i,j]\n","\n","  dataset['Age'] = dataset['Age'].astype(int)\n","\n","train_df.head()"],"execution_count":78,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Survived</th>\n","      <th>Pclass</th>\n","      <th>Sex</th>\n","      <th>Age</th>\n","      <th>SibSp</th>\n","      <th>Parch</th>\n","      <th>Fare</th>\n","      <th>Embarked</th>\n","      <th>Title</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>0</td>\n","      <td>22</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>7.2500</td>\n","      <td>S</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>38</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>71.2833</td>\n","      <td>C</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>1</td>\n","      <td>3</td>\n","      <td>1</td>\n","      <td>26</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>7.9250</td>\n","      <td>S</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>35</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>53.1000</td>\n","      <td>S</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>0</td>\n","      <td>35</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>8.0500</td>\n","      <td>S</td>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   Survived  Pclass  Sex  Age  SibSp  Parch     Fare Embarked  Title\n","0         0       3    0   22      1      0   7.2500        S      1\n","1         1       1    1   38      1      0  71.2833        C      3\n","2         1       3    1   26      0      0   7.9250        S      2\n","3         1       1    1   35      1      0  53.1000        S      3\n","4         0       3    0   35      0      0   8.0500        S      1"]},"metadata":{"tags":[]},"execution_count":78}]},{"cell_type":"code","metadata":{"id":"-I-7Nw3_WcaM","colab":{"base_uri":"https://localhost:8080/","height":197},"executionInfo":{"status":"ok","timestamp":1606117555295,"user_tz":-540,"elapsed":10499,"user":{"displayName":"최준영","photoUrl":"","userId":"02012717858183245906"}},"outputId":"1b75fb50-8d7c-447d-d332-6d054bcbec51"},"source":["train_df['AgeBand'] = pd.cut(train_df['Age'], 5)\n","train_df[['AgeBand', 'Survived']].groupby(['AgeBand'], as_index=False).mean().sort_values(by='AgeBand', ascending=True)"],"execution_count":79,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>AgeBand</th>\n","      <th>Survived</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>(-0.08, 16.0]</td>\n","      <td>0.550000</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>(16.0, 32.0]</td>\n","      <td>0.370690</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>(32.0, 48.0]</td>\n","      <td>0.438596</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>(48.0, 64.0]</td>\n","      <td>0.247126</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>(64.0, 80.0]</td>\n","      <td>0.365854</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["         AgeBand  Survived\n","0  (-0.08, 16.0]  0.550000\n","1   (16.0, 32.0]  0.370690\n","2   (32.0, 48.0]  0.438596\n","3   (48.0, 64.0]  0.247126\n","4   (64.0, 80.0]  0.365854"]},"metadata":{"tags":[]},"execution_count":79}]},{"cell_type":"code","metadata":{"id":"Dsuz3XOxhrFG","colab":{"base_uri":"https://localhost:8080/","height":197},"executionInfo":{"status":"ok","timestamp":1606117555295,"user_tz":-540,"elapsed":10491,"user":{"displayName":"최준영","photoUrl":"","userId":"02012717858183245906"}},"outputId":"b800b55d-cc25-43c0-e9eb-f91618922871"},"source":["for dataset in combine:    \n","    dataset.loc[ dataset['Age'] <= 16, 'Age'] = 0\n","    dataset.loc[(dataset['Age'] > 16) & (dataset['Age'] <= 32), 'Age'] = 1\n","    dataset.loc[(dataset['Age'] > 32) & (dataset['Age'] <= 48), 'Age'] = 2\n","    dataset.loc[(dataset['Age'] > 48) & (dataset['Age'] <= 64), 'Age'] = 3\n","    dataset.loc[ dataset['Age'] > 64, 'Age']\n","train_df.head()"],"execution_count":80,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Survived</th>\n","      <th>Pclass</th>\n","      <th>Sex</th>\n","      <th>Age</th>\n","      <th>SibSp</th>\n","      <th>Parch</th>\n","      <th>Fare</th>\n","      <th>Embarked</th>\n","      <th>Title</th>\n","      <th>AgeBand</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>7.2500</td>\n","      <td>S</td>\n","      <td>1</td>\n","      <td>(16.0, 32.0]</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>71.2833</td>\n","      <td>C</td>\n","      <td>3</td>\n","      <td>(32.0, 48.0]</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>1</td>\n","      <td>3</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>7.9250</td>\n","      <td>S</td>\n","      <td>2</td>\n","      <td>(16.0, 32.0]</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>53.1000</td>\n","      <td>S</td>\n","      <td>3</td>\n","      <td>(32.0, 48.0]</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>0</td>\n","      <td>2</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>8.0500</td>\n","      <td>S</td>\n","      <td>1</td>\n","      <td>(32.0, 48.0]</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   Survived  Pclass  Sex  Age  ...     Fare  Embarked  Title       AgeBand\n","0         0       3    0    1  ...   7.2500         S      1  (16.0, 32.0]\n","1         1       1    1    2  ...  71.2833         C      3  (32.0, 48.0]\n","2         1       3    1    1  ...   7.9250         S      2  (16.0, 32.0]\n","3         1       1    1    2  ...  53.1000         S      3  (32.0, 48.0]\n","4         0       3    0    2  ...   8.0500         S      1  (32.0, 48.0]\n","\n","[5 rows x 10 columns]"]},"metadata":{"tags":[]},"execution_count":80}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":197},"id":"mSfAu9vv1gnT","executionInfo":{"status":"ok","timestamp":1606117555296,"user_tz":-540,"elapsed":10481,"user":{"displayName":"최준영","photoUrl":"","userId":"02012717858183245906"}},"outputId":"ae666bc0-6467-4a0c-eb84-24545f23601a"},"source":["train_df = train_df.drop(['AgeBand'], axis=1)\n","combine = [train_df, test_df]\n","train_df.head()"],"execution_count":81,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Survived</th>\n","      <th>Pclass</th>\n","      <th>Sex</th>\n","      <th>Age</th>\n","      <th>SibSp</th>\n","      <th>Parch</th>\n","      <th>Fare</th>\n","      <th>Embarked</th>\n","      <th>Title</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>7.2500</td>\n","      <td>S</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>71.2833</td>\n","      <td>C</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>1</td>\n","      <td>3</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>7.9250</td>\n","      <td>S</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>53.1000</td>\n","      <td>S</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>0</td>\n","      <td>2</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>8.0500</td>\n","      <td>S</td>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   Survived  Pclass  Sex  Age  SibSp  Parch     Fare Embarked  Title\n","0         0       3    0    1      1      0   7.2500        S      1\n","1         1       1    1    2      1      0  71.2833        C      3\n","2         1       3    1    1      0      0   7.9250        S      2\n","3         1       1    1    2      1      0  53.1000        S      3\n","4         0       3    0    2      0      0   8.0500        S      1"]},"metadata":{"tags":[]},"execution_count":81}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":317},"id":"mChyVpY22hpK","executionInfo":{"status":"ok","timestamp":1606117555297,"user_tz":-540,"elapsed":10474,"user":{"displayName":"최준영","photoUrl":"","userId":"02012717858183245906"}},"outputId":"2ceb0769-24cb-4d9d-b74b-2946c4ac6d9d"},"source":["for dataset in combine:\n","  dataset['FamilySize'] = dataset['SibSp'] + dataset['Parch'] + 1\n","\n","train_df[['FamilySize', 'Survived']].groupby(['FamilySize'], as_index=False).mean().sort_values(by='Survived',ascending=False)\n"," "],"execution_count":82,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>FamilySize</th>\n","      <th>Survived</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>3</th>\n","      <td>4</td>\n","      <td>0.724138</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>3</td>\n","      <td>0.578431</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2</td>\n","      <td>0.552795</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>7</td>\n","      <td>0.333333</td>\n","    </tr>\n","    <tr>\n","      <th>0</th>\n","      <td>1</td>\n","      <td>0.303538</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>5</td>\n","      <td>0.200000</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>6</td>\n","      <td>0.136364</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>8</td>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>8</th>\n","      <td>11</td>\n","      <td>0.000000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   FamilySize  Survived\n","3           4  0.724138\n","2           3  0.578431\n","1           2  0.552795\n","6           7  0.333333\n","0           1  0.303538\n","4           5  0.200000\n","5           6  0.136364\n","7           8  0.000000\n","8          11  0.000000"]},"metadata":{"tags":[]},"execution_count":82}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":137},"id":"26dLifQX46cO","executionInfo":{"status":"ok","timestamp":1606117555297,"user_tz":-540,"elapsed":10465,"user":{"displayName":"최준영","photoUrl":"","userId":"02012717858183245906"}},"outputId":"3c857f03-2b39-4949-9463-67553d63fcab"},"source":["for dataset in combine:\n","  dataset['IsAlone'] = 0\n","  dataset.loc[dataset['FamilySize']==1, 'IsAlone']=1\n","\n","train_df[['IsAlone','Survived']].groupby(['IsAlone'], as_index=True).mean()\n"],"execution_count":83,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Survived</th>\n","    </tr>\n","    <tr>\n","      <th>IsAlone</th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0.505650</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>0.303538</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["         Survived\n","IsAlone          \n","0        0.505650\n","1        0.303538"]},"metadata":{"tags":[]},"execution_count":83}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":197},"id":"oh2FIL6a6kY9","executionInfo":{"status":"ok","timestamp":1606117555299,"user_tz":-540,"elapsed":10457,"user":{"displayName":"최준영","photoUrl":"","userId":"02012717858183245906"}},"outputId":"9ab12de3-4693-4555-9083-03801642ce12"},"source":["train_df = train_df.drop(['Parch','SibSp','FamilySize'], axis=1)\n","test_df = test_df.drop(['Parch','SibSp','FamilySize'], axis=1)\n","combine = [train_df,test_df]\n","\n","train_df.head()"],"execution_count":84,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Survived</th>\n","      <th>Pclass</th>\n","      <th>Sex</th>\n","      <th>Age</th>\n","      <th>Fare</th>\n","      <th>Embarked</th>\n","      <th>Title</th>\n","      <th>IsAlone</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>7.2500</td>\n","      <td>S</td>\n","      <td>1</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>2</td>\n","      <td>71.2833</td>\n","      <td>C</td>\n","      <td>3</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>1</td>\n","      <td>3</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>7.9250</td>\n","      <td>S</td>\n","      <td>2</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>2</td>\n","      <td>53.1000</td>\n","      <td>S</td>\n","      <td>3</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>0</td>\n","      <td>2</td>\n","      <td>8.0500</td>\n","      <td>S</td>\n","      <td>1</td>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   Survived  Pclass  Sex  Age     Fare Embarked  Title  IsAlone\n","0         0       3    0    1   7.2500        S      1        0\n","1         1       1    1    2  71.2833        C      3        0\n","2         1       3    1    1   7.9250        S      2        1\n","3         1       1    1    2  53.1000        S      3        0\n","4         0       3    0    2   8.0500        S      1        1"]},"metadata":{"tags":[]},"execution_count":84}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":197},"id":"dXd2QeoT8vQ5","executionInfo":{"status":"ok","timestamp":1606117555299,"user_tz":-540,"elapsed":10447,"user":{"displayName":"최준영","photoUrl":"","userId":"02012717858183245906"}},"outputId":"38fb5654-2ee9-4fcd-9612-bc604e46ffea"},"source":["for dataset in combine:\n","  dataset['Age*Class'] = dataset['Age']*dataset['Pclass']\n","\n","train_df.loc[:,['Age*Class','Age','Pclass']].head()\n","\n"],"execution_count":85,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Age*Class</th>\n","      <th>Age</th>\n","      <th>Pclass</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>3</td>\n","      <td>1</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>3</td>\n","      <td>1</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>6</td>\n","      <td>2</td>\n","      <td>3</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   Age*Class  Age  Pclass\n","0          3    1       3\n","1          2    2       1\n","2          3    1       3\n","3          2    2       1\n","4          6    2       3"]},"metadata":{"tags":[]},"execution_count":85}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":34},"id":"TtzIDKpj9sfF","executionInfo":{"status":"ok","timestamp":1606117555300,"user_tz":-540,"elapsed":10439,"user":{"displayName":"최준영","photoUrl":"","userId":"02012717858183245906"}},"outputId":"6dea8490-f169-410c-da12-64e6f4de0f7e"},"source":["freq_port = train_df.Embarked.dropna().mode()[0]\n","freq_port"],"execution_count":86,"outputs":[{"output_type":"execute_result","data":{"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"},"text/plain":["'S'"]},"metadata":{"tags":[]},"execution_count":86}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":137},"id":"xAIhggUx-y4a","executionInfo":{"status":"ok","timestamp":1606117555300,"user_tz":-540,"elapsed":10430,"user":{"displayName":"최준영","photoUrl":"","userId":"02012717858183245906"}},"outputId":"229e30ea-3618-45b8-b244-e3794d4f369b"},"source":["for dataset in combine:\n","  dataset['Embarked'] = dataset['Embarked'].fillna(freq_port)\n","\n","train_df[['Embarked','Survived']].groupby(['Embarked'], as_index=False).mean().sort_values(by='Survived', ascending=False)"],"execution_count":87,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Embarked</th>\n","      <th>Survived</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>C</td>\n","      <td>0.553571</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>Q</td>\n","      <td>0.389610</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>S</td>\n","      <td>0.339009</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["  Embarked  Survived\n","0        C  0.553571\n","1        Q  0.389610\n","2        S  0.339009"]},"metadata":{"tags":[]},"execution_count":87}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":197},"id":"fcbAtVR5CCFr","executionInfo":{"status":"ok","timestamp":1606117555301,"user_tz":-540,"elapsed":10423,"user":{"displayName":"최준영","photoUrl":"","userId":"02012717858183245906"}},"outputId":"00bf61d2-a8df-4c2c-dd43-93eb6c3408cf"},"source":["for dataset in combine:\n","  dataset['Embarked'] = dataset['Embarked'].map({'S':0,'C':1,'Q':2}).astype(int)\n","\n","train_df.head()"],"execution_count":88,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Survived</th>\n","      <th>Pclass</th>\n","      <th>Sex</th>\n","      <th>Age</th>\n","      <th>Fare</th>\n","      <th>Embarked</th>\n","      <th>Title</th>\n","      <th>IsAlone</th>\n","      <th>Age*Class</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>7.2500</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>2</td>\n","      <td>71.2833</td>\n","      <td>1</td>\n","      <td>3</td>\n","      <td>0</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>1</td>\n","      <td>3</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>7.9250</td>\n","      <td>0</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>2</td>\n","      <td>53.1000</td>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>0</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>0</td>\n","      <td>2</td>\n","      <td>8.0500</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>6</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   Survived  Pclass  Sex  Age     Fare  Embarked  Title  IsAlone  Age*Class\n","0         0       3    0    1   7.2500         0      1        0          3\n","1         1       1    1    2  71.2833         1      3        0          2\n","2         1       3    1    1   7.9250         0      2        1          3\n","3         1       1    1    2  53.1000         0      3        0          2\n","4         0       3    0    2   8.0500         0      1        1          6"]},"metadata":{"tags":[]},"execution_count":88}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":197},"id":"-k0NjOSqCwmo","executionInfo":{"status":"ok","timestamp":1606117769757,"user_tz":-540,"elapsed":3231,"user":{"displayName":"최준영","photoUrl":"","userId":"02012717858183245906"}},"outputId":"4a87899a-65e3-4b5a-baae-1b30805e718b"},"source":["test_df['Fare'].fillna(test_df['Fare'].dropna().median(), inplace=True)\n","test_df.head()"],"execution_count":89,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>PassengerId</th>\n","      <th>Pclass</th>\n","      <th>Sex</th>\n","      <th>Age</th>\n","      <th>Fare</th>\n","      <th>Embarked</th>\n","      <th>Title</th>\n","      <th>IsAlone</th>\n","      <th>Age*Class</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>892</td>\n","      <td>3</td>\n","      <td>0</td>\n","      <td>2</td>\n","      <td>7.8292</td>\n","      <td>2</td>\n","      <td>1.0</td>\n","      <td>1</td>\n","      <td>6</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>893</td>\n","      <td>3</td>\n","      <td>1</td>\n","      <td>2</td>\n","      <td>7.0000</td>\n","      <td>0</td>\n","      <td>3.0</td>\n","      <td>0</td>\n","      <td>6</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>894</td>\n","      <td>2</td>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>9.6875</td>\n","      <td>2</td>\n","      <td>1.0</td>\n","      <td>1</td>\n","      <td>6</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>895</td>\n","      <td>3</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>8.6625</td>\n","      <td>0</td>\n","      <td>1.0</td>\n","      <td>1</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>896</td>\n","      <td>3</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>12.2875</td>\n","      <td>0</td>\n","      <td>3.0</td>\n","      <td>0</td>\n","      <td>3</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   PassengerId  Pclass  Sex  Age     Fare  Embarked  Title  IsAlone  Age*Class\n","0          892       3    0    2   7.8292         2    1.0        1          6\n","1          893       3    1    2   7.0000         0    3.0        0          6\n","2          894       2    0    3   9.6875         2    1.0        1          6\n","3          895       3    0    1   8.6625         0    1.0        1          3\n","4          896       3    1    1  12.2875         0    3.0        0          3"]},"metadata":{"tags":[]},"execution_count":89}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":167},"id":"sq1R2wnGFDU5","executionInfo":{"status":"ok","timestamp":1606118086080,"user_tz":-540,"elapsed":620,"user":{"displayName":"최준영","photoUrl":"","userId":"02012717858183245906"}},"outputId":"87d3b0d3-1771-4b3a-81cd-410debcc79f0"},"source":["train_df['FareBand'] = pd.qcut(train_df['Fare'], 4)\n","\n","train_df[['FareBand','Survived']].groupby('FareBand',as_index=False).mean().sort_values(by='FareBand', ascending=True)"],"execution_count":91,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>FareBand</th>\n","      <th>Survived</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>(-0.001, 7.91]</td>\n","      <td>0.197309</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>(7.91, 14.454]</td>\n","      <td>0.303571</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>(14.454, 31.0]</td>\n","      <td>0.454955</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>(31.0, 512.329]</td>\n","      <td>0.581081</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["          FareBand  Survived\n","0   (-0.001, 7.91]  0.197309\n","1   (7.91, 14.454]  0.303571\n","2   (14.454, 31.0]  0.454955\n","3  (31.0, 512.329]  0.581081"]},"metadata":{"tags":[]},"execution_count":91}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":347},"id":"3OS9uqYuGLNi","executionInfo":{"status":"ok","timestamp":1606118103426,"user_tz":-540,"elapsed":2642,"user":{"displayName":"최준영","photoUrl":"","userId":"02012717858183245906"}},"outputId":"19e34ac3-d37f-4399-a644-0bd099800f72"},"source":["for dataset in combine:\n","    dataset.loc[ dataset['Fare'] <= 7.91, 'Fare'] = 0\n","    dataset.loc[(dataset['Fare'] > 7.91) & (dataset['Fare'] <= 14.454), 'Fare'] = 1\n","    dataset.loc[(dataset['Fare'] > 14.454) & (dataset['Fare'] <= 31), 'Fare']   = 2\n","    dataset.loc[ dataset['Fare'] > 31, 'Fare'] = 3\n","    dataset['Fare'] = dataset['Fare'].astype(int)\n","\n","train_df = train_df.drop(['FareBand'], axis=1)\n","combine = [train_df, test_df]\n","    \n","train_df.head(10)"],"execution_count":92,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Survived</th>\n","      <th>Pclass</th>\n","      <th>Sex</th>\n","      <th>Age</th>\n","      <th>Fare</th>\n","      <th>Embarked</th>\n","      <th>Title</th>\n","      <th>IsAlone</th>\n","      <th>Age*Class</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>2</td>\n","      <td>3</td>\n","      <td>1</td>\n","      <td>3</td>\n","      <td>0</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>1</td>\n","      <td>3</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>2</td>\n","      <td>3</td>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>0</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>0</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>6</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>1</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>9</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>3</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>2</td>\n","      <td>0</td>\n","      <td>4</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>8</th>\n","      <td>1</td>\n","      <td>3</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>0</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>9</th>\n","      <td>1</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>3</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   Survived  Pclass  Sex  Age  Fare  Embarked  Title  IsAlone  Age*Class\n","0         0       3    0    1     0         0      1        0          3\n","1         1       1    1    2     3         1      3        0          2\n","2         1       3    1    1     1         0      2        1          3\n","3         1       1    1    2     3         0      3        0          2\n","4         0       3    0    2     1         0      1        1          6\n","5         0       3    0    3     1         2      1        1          9\n","6         0       1    0    3     3         0      1        1          3\n","7         0       3    0    0     2         0      4        0          0\n","8         1       3    1    1     1         0      3        0          3\n","9         1       2    1    0     2         1      3        0          0"]},"metadata":{"tags":[]},"execution_count":92}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":197},"id":"-7ga41KcGU8E","executionInfo":{"status":"ok","timestamp":1606118130132,"user_tz":-540,"elapsed":3380,"user":{"displayName":"최준영","photoUrl":"","userId":"02012717858183245906"}},"outputId":"4a4b0da4-07f1-4faf-fd4e-49d3f8b01e14"},"source":["test_df.head()"],"execution_count":93,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>PassengerId</th>\n","      <th>Pclass</th>\n","      <th>Sex</th>\n","      <th>Age</th>\n","      <th>Fare</th>\n","      <th>Embarked</th>\n","      <th>Title</th>\n","      <th>IsAlone</th>\n","      <th>Age*Class</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>892</td>\n","      <td>3</td>\n","      <td>0</td>\n","      <td>2</td>\n","      <td>0</td>\n","      <td>2</td>\n","      <td>1.0</td>\n","      <td>1</td>\n","      <td>6</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>893</td>\n","      <td>3</td>\n","      <td>1</td>\n","      <td>2</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>3.0</td>\n","      <td>0</td>\n","      <td>6</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>894</td>\n","      <td>2</td>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>1</td>\n","      <td>2</td>\n","      <td>1.0</td>\n","      <td>1</td>\n","      <td>6</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>895</td>\n","      <td>3</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1.0</td>\n","      <td>1</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>896</td>\n","      <td>3</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>3.0</td>\n","      <td>0</td>\n","      <td>3</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   PassengerId  Pclass  Sex  Age  Fare  Embarked  Title  IsAlone  Age*Class\n","0          892       3    0    2     0         2    1.0        1          6\n","1          893       3    1    2     0         0    3.0        0          6\n","2          894       2    0    3     1         2    1.0        1          6\n","3          895       3    0    1     1         0    1.0        1          3\n","4          896       3    1    1     1         0    3.0        0          3"]},"metadata":{"tags":[]},"execution_count":93}]},{"cell_type":"code","metadata":{"id":"P-SsXBbwGbRz"},"source":[""],"execution_count":null,"outputs":[]}]}