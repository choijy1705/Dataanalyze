{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Titanic","provenance":[],"collapsed_sections":[],"toc_visible":true,"mount_file_id":"1lV6uT1LbKkiMm5DhX2NlM3w0h-QkyKnl","authorship_tag":"ABX9TyPkq6LE3tKgcLvHi6Rk3Gr0"},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"code","metadata":{"id":"mS78lxBpFPc2","executionInfo":{"status":"ok","timestamp":1606196198734,"user_tz":-540,"elapsed":2044,"user":{"displayName":"최준영","photoUrl":"","userId":"02012717858183245906"}}},"source":["# data analysis and wrangling\n","import pandas as pd\n","import numpy as np\n","import random as rnd\n","\n","# visualization\n","import seaborn as sns\n","import matplotlib.pyplot as plt\n","%matplotlib inline\n","\n","# machine learning\n","from sklearn.linear_model import LogisticRegression\n","from sklearn.svm import SVC, LinearSVC\n","from sklearn.ensemble import RandomForestClassifier\n","from sklearn.neighbors import KNeighborsClassifier\n","from sklearn.naive_bayes import GaussianNB\n","from sklearn.linear_model import Perceptron\n","from sklearn.linear_model import SGDClassifier\n","from sklearn.tree import DecisionTreeClassifier"],"execution_count":2,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"DK8Ww3NcKU6I"},"source":["### **1.Titanic 데이터 셋 불러오기**"]},{"cell_type":"code","metadata":{"id":"F5KPXgDuFTq4","executionInfo":{"status":"ok","timestamp":1606196202360,"user_tz":-540,"elapsed":5667,"user":{"displayName":"최준영","photoUrl":"","userId":"02012717858183245906"}}},"source":["train_df = pd.read_csv(\"/content/drive/My Drive/Colab Notebooks/data/titanic/train.csv\")\n","test_df = pd.read_csv(\"/content/drive/My Drive/Colab Notebooks/data/titanic/test.csv\")\n","combine = [train_df, test_df]"],"execution_count":3,"outputs":[]},{"cell_type":"code","metadata":{"id":"KG5d0g7wHP07","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1606196202368,"user_tz":-540,"elapsed":5652,"user":{"displayName":"최준영","photoUrl":"","userId":"02012717858183245906"}},"outputId":"28ba5b2b-cfa5-4e97-c582-9fa9d48f4a2b"},"source":["train_df.shape"],"execution_count":4,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(891, 12)"]},"metadata":{"tags":[]},"execution_count":4}]},{"cell_type":"code","metadata":{"id":"vWToZmy0Mb-P","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1606196202369,"user_tz":-540,"elapsed":5644,"user":{"displayName":"최준영","photoUrl":"","userId":"02012717858183245906"}},"outputId":"c2d54799-768b-4877-b08d-eb9dbddbe348"},"source":["test_df.shape"],"execution_count":5,"outputs":[{"output_type":"execute_result","data":{"text/plain":["(418, 11)"]},"metadata":{"tags":[]},"execution_count":5}]},{"cell_type":"code","metadata":{"id":"4DyEtWpkHdrd","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1606196202369,"user_tz":-540,"elapsed":5635,"user":{"displayName":"최준영","photoUrl":"","userId":"02012717858183245906"}},"outputId":"b8c8a1a3-4bde-4736-e316-b1edf881f993"},"source":["train_df.columns.values"],"execution_count":6,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array(['PassengerId', 'Survived', 'Pclass', 'Name', 'Sex', 'Age', 'SibSp',\n","       'Parch', 'Ticket', 'Fare', 'Cabin', 'Embarked'], dtype=object)"]},"metadata":{"tags":[]},"execution_count":6}]},{"cell_type":"code","metadata":{"id":"LOjZOWP3HoFN","colab":{"base_uri":"https://localhost:8080/","height":197},"executionInfo":{"status":"ok","timestamp":1606196202371,"user_tz":-540,"elapsed":5627,"user":{"displayName":"최준영","photoUrl":"","userId":"02012717858183245906"}},"outputId":"9c2d3043-87e3-487e-fdb6-b91e100f31f9"},"source":["train_df.head()"],"execution_count":7,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>PassengerId</th>\n","      <th>Survived</th>\n","      <th>Pclass</th>\n","      <th>Name</th>\n","      <th>Sex</th>\n","      <th>Age</th>\n","      <th>SibSp</th>\n","      <th>Parch</th>\n","      <th>Ticket</th>\n","      <th>Fare</th>\n","      <th>Cabin</th>\n","      <th>Embarked</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>Braund, Mr. Owen Harris</td>\n","      <td>male</td>\n","      <td>22.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>A/5 21171</td>\n","      <td>7.2500</td>\n","      <td>NaN</td>\n","      <td>S</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n","      <td>female</td>\n","      <td>38.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>PC 17599</td>\n","      <td>71.2833</td>\n","      <td>C85</td>\n","      <td>C</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>3</td>\n","      <td>1</td>\n","      <td>3</td>\n","      <td>Heikkinen, Miss. Laina</td>\n","      <td>female</td>\n","      <td>26.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>STON/O2. 3101282</td>\n","      <td>7.9250</td>\n","      <td>NaN</td>\n","      <td>S</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>4</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n","      <td>female</td>\n","      <td>35.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>113803</td>\n","      <td>53.1000</td>\n","      <td>C123</td>\n","      <td>S</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>5</td>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>Allen, Mr. William Henry</td>\n","      <td>male</td>\n","      <td>35.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>373450</td>\n","      <td>8.0500</td>\n","      <td>NaN</td>\n","      <td>S</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   PassengerId  Survived  Pclass  ...     Fare Cabin  Embarked\n","0            1         0       3  ...   7.2500   NaN         S\n","1            2         1       1  ...  71.2833   C85         C\n","2            3         1       3  ...   7.9250   NaN         S\n","3            4         1       1  ...  53.1000  C123         S\n","4            5         0       3  ...   8.0500   NaN         S\n","\n","[5 rows x 12 columns]"]},"metadata":{"tags":[]},"execution_count":7}]},{"cell_type":"code","metadata":{"id":"yXhd2Y0FNKZe","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1606196202371,"user_tz":-540,"elapsed":5618,"user":{"displayName":"최준영","photoUrl":"","userId":"02012717858183245906"}},"outputId":"a7a07186-e296-48fe-d788-8b1f89a46e63"},"source":["train_df.info()"],"execution_count":8,"outputs":[{"output_type":"stream","text":["<class 'pandas.core.frame.DataFrame'>\n","RangeIndex: 891 entries, 0 to 890\n","Data columns (total 12 columns):\n"," #   Column       Non-Null Count  Dtype  \n","---  ------       --------------  -----  \n"," 0   PassengerId  891 non-null    int64  \n"," 1   Survived     891 non-null    int64  \n"," 2   Pclass       891 non-null    int64  \n"," 3   Name         891 non-null    object \n"," 4   Sex          891 non-null    object \n"," 5   Age          714 non-null    float64\n"," 6   SibSp        891 non-null    int64  \n"," 7   Parch        891 non-null    int64  \n"," 8   Ticket       891 non-null    object \n"," 9   Fare         891 non-null    float64\n"," 10  Cabin        204 non-null    object \n"," 11  Embarked     889 non-null    object \n","dtypes: float64(2), int64(5), object(5)\n","memory usage: 83.7+ KB\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"xdPk4bYUNPLA","colab":{"base_uri":"https://localhost:8080/","height":287},"executionInfo":{"status":"ok","timestamp":1606196202372,"user_tz":-540,"elapsed":5611,"user":{"displayName":"최준영","photoUrl":"","userId":"02012717858183245906"}},"outputId":"fe7086c7-b238-4647-c45a-60787f4e6e49"},"source":["train_df.describe()"],"execution_count":9,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>PassengerId</th>\n","      <th>Survived</th>\n","      <th>Pclass</th>\n","      <th>Age</th>\n","      <th>SibSp</th>\n","      <th>Parch</th>\n","      <th>Fare</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>count</th>\n","      <td>891.000000</td>\n","      <td>891.000000</td>\n","      <td>891.000000</td>\n","      <td>714.000000</td>\n","      <td>891.000000</td>\n","      <td>891.000000</td>\n","      <td>891.000000</td>\n","    </tr>\n","    <tr>\n","      <th>mean</th>\n","      <td>446.000000</td>\n","      <td>0.383838</td>\n","      <td>2.308642</td>\n","      <td>29.699118</td>\n","      <td>0.523008</td>\n","      <td>0.381594</td>\n","      <td>32.204208</td>\n","    </tr>\n","    <tr>\n","      <th>std</th>\n","      <td>257.353842</td>\n","      <td>0.486592</td>\n","      <td>0.836071</td>\n","      <td>14.526497</td>\n","      <td>1.102743</td>\n","      <td>0.806057</td>\n","      <td>49.693429</td>\n","    </tr>\n","    <tr>\n","      <th>min</th>\n","      <td>1.000000</td>\n","      <td>0.000000</td>\n","      <td>1.000000</td>\n","      <td>0.420000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>25%</th>\n","      <td>223.500000</td>\n","      <td>0.000000</td>\n","      <td>2.000000</td>\n","      <td>20.125000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>7.910400</td>\n","    </tr>\n","    <tr>\n","      <th>50%</th>\n","      <td>446.000000</td>\n","      <td>0.000000</td>\n","      <td>3.000000</td>\n","      <td>28.000000</td>\n","      <td>0.000000</td>\n","      <td>0.000000</td>\n","      <td>14.454200</td>\n","    </tr>\n","    <tr>\n","      <th>75%</th>\n","      <td>668.500000</td>\n","      <td>1.000000</td>\n","      <td>3.000000</td>\n","      <td>38.000000</td>\n","      <td>1.000000</td>\n","      <td>0.000000</td>\n","      <td>31.000000</td>\n","    </tr>\n","    <tr>\n","      <th>max</th>\n","      <td>891.000000</td>\n","      <td>1.000000</td>\n","      <td>3.000000</td>\n","      <td>80.000000</td>\n","      <td>8.000000</td>\n","      <td>6.000000</td>\n","      <td>512.329200</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["       PassengerId    Survived      Pclass  ...       SibSp       Parch        Fare\n","count   891.000000  891.000000  891.000000  ...  891.000000  891.000000  891.000000\n","mean    446.000000    0.383838    2.308642  ...    0.523008    0.381594   32.204208\n","std     257.353842    0.486592    0.836071  ...    1.102743    0.806057   49.693429\n","min       1.000000    0.000000    1.000000  ...    0.000000    0.000000    0.000000\n","25%     223.500000    0.000000    2.000000  ...    0.000000    0.000000    7.910400\n","50%     446.000000    0.000000    3.000000  ...    0.000000    0.000000   14.454200\n","75%     668.500000    1.000000    3.000000  ...    1.000000    0.000000   31.000000\n","max     891.000000    1.000000    3.000000  ...    8.000000    6.000000  512.329200\n","\n","[8 rows x 7 columns]"]},"metadata":{"tags":[]},"execution_count":9}]},{"cell_type":"code","metadata":{"id":"1Xn0UVh-Ljcd","colab":{"base_uri":"https://localhost:8080/","height":167},"executionInfo":{"status":"ok","timestamp":1606196202372,"user_tz":-540,"elapsed":5602,"user":{"displayName":"최준영","photoUrl":"","userId":"02012717858183245906"}},"outputId":"3c5a5717-25b9-4dad-f938-8f1191ae34d8"},"source":["train_df.describe(include=[\"O\"])"],"execution_count":10,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Name</th>\n","      <th>Sex</th>\n","      <th>Ticket</th>\n","      <th>Cabin</th>\n","      <th>Embarked</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>count</th>\n","      <td>891</td>\n","      <td>891</td>\n","      <td>891</td>\n","      <td>204</td>\n","      <td>889</td>\n","    </tr>\n","    <tr>\n","      <th>unique</th>\n","      <td>891</td>\n","      <td>2</td>\n","      <td>681</td>\n","      <td>147</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>top</th>\n","      <td>Troutt, Miss. Edwina Celia \"Winnie\"</td>\n","      <td>male</td>\n","      <td>347082</td>\n","      <td>G6</td>\n","      <td>S</td>\n","    </tr>\n","    <tr>\n","      <th>freq</th>\n","      <td>1</td>\n","      <td>577</td>\n","      <td>7</td>\n","      <td>4</td>\n","      <td>644</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["                                       Name   Sex  Ticket Cabin Embarked\n","count                                   891   891     891   204      889\n","unique                                  891     2     681   147        3\n","top     Troutt, Miss. Edwina Celia \"Winnie\"  male  347082    G6        S\n","freq                                      1   577       7     4      644"]},"metadata":{"tags":[]},"execution_count":10}]},{"cell_type":"code","metadata":{"id":"Gh-rAKpINEd2","colab":{"base_uri":"https://localhost:8080/","height":167},"executionInfo":{"status":"ok","timestamp":1606196202373,"user_tz":-540,"elapsed":5593,"user":{"displayName":"최준영","photoUrl":"","userId":"02012717858183245906"}},"outputId":"6c5b780e-42ab-4419-912a-fbafd7dfea69"},"source":["train_df.describe(include=['O'])"],"execution_count":11,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Name</th>\n","      <th>Sex</th>\n","      <th>Ticket</th>\n","      <th>Cabin</th>\n","      <th>Embarked</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>count</th>\n","      <td>891</td>\n","      <td>891</td>\n","      <td>891</td>\n","      <td>204</td>\n","      <td>889</td>\n","    </tr>\n","    <tr>\n","      <th>unique</th>\n","      <td>891</td>\n","      <td>2</td>\n","      <td>681</td>\n","      <td>147</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>top</th>\n","      <td>Troutt, Miss. Edwina Celia \"Winnie\"</td>\n","      <td>male</td>\n","      <td>347082</td>\n","      <td>G6</td>\n","      <td>S</td>\n","    </tr>\n","    <tr>\n","      <th>freq</th>\n","      <td>1</td>\n","      <td>577</td>\n","      <td>7</td>\n","      <td>4</td>\n","      <td>644</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["                                       Name   Sex  Ticket Cabin Embarked\n","count                                   891   891     891   204      889\n","unique                                  891     2     681   147        3\n","top     Troutt, Miss. Edwina Celia \"Winnie\"  male  347082    G6        S\n","freq                                      1   577       7     4      644"]},"metadata":{"tags":[]},"execution_count":11}]},{"cell_type":"code","metadata":{"id":"Na-fEU21O4IJ","colab":{"base_uri":"https://localhost:8080/","height":137},"executionInfo":{"status":"ok","timestamp":1606196202373,"user_tz":-540,"elapsed":5584,"user":{"displayName":"최준영","photoUrl":"","userId":"02012717858183245906"}},"outputId":"bd39ab78-c83d-422c-8e48-ad9961e60679"},"source":["train_df[['Pclass','Survived']].groupby(['Pclass'], as_index = False).mean().sort_values(by='Survived', ascending=False)"],"execution_count":12,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Pclass</th>\n","      <th>Survived</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1</td>\n","      <td>0.629630</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2</td>\n","      <td>0.472826</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>3</td>\n","      <td>0.242363</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   Pclass  Survived\n","0       1  0.629630\n","1       2  0.472826\n","2       3  0.242363"]},"metadata":{"tags":[]},"execution_count":12}]},{"cell_type":"code","metadata":{"id":"Obqzi_OzPc-t","colab":{"base_uri":"https://localhost:8080/","height":107},"executionInfo":{"status":"ok","timestamp":1606196202373,"user_tz":-540,"elapsed":5576,"user":{"displayName":"최준영","photoUrl":"","userId":"02012717858183245906"}},"outputId":"2b54b6e1-4733-4c1f-e0e8-11e8c71f6158"},"source":["train_df[[\"Sex\", \"Survived\"]].groupby(['Sex'], as_index=False).mean().sort_values(by='Survived', ascending=False)"],"execution_count":13,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Sex</th>\n","      <th>Survived</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>female</td>\n","      <td>0.742038</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>male</td>\n","      <td>0.188908</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["      Sex  Survived\n","0  female  0.742038\n","1    male  0.188908"]},"metadata":{"tags":[]},"execution_count":13}]},{"cell_type":"code","metadata":{"id":"v-vujqWsPy0b","colab":{"base_uri":"https://localhost:8080/","height":257},"executionInfo":{"status":"ok","timestamp":1606196202374,"user_tz":-540,"elapsed":5567,"user":{"displayName":"최준영","photoUrl":"","userId":"02012717858183245906"}},"outputId":"8bc294e3-b482-40ad-8a5d-8810eb6d3b70"},"source":["train_df[[\"SibSp\", \"Survived\"]].groupby(['SibSp'], as_index=False).mean().sort_values(by='Survived', ascending=False)"],"execution_count":14,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>SibSp</th>\n","      <th>Survived</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>1</th>\n","      <td>1</td>\n","      <td>0.535885</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2</td>\n","      <td>0.464286</td>\n","    </tr>\n","    <tr>\n","      <th>0</th>\n","      <td>0</td>\n","      <td>0.345395</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>3</td>\n","      <td>0.250000</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>4</td>\n","      <td>0.166667</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>5</td>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>8</td>\n","      <td>0.000000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   SibSp  Survived\n","1      1  0.535885\n","2      2  0.464286\n","0      0  0.345395\n","3      3  0.250000\n","4      4  0.166667\n","5      5  0.000000\n","6      8  0.000000"]},"metadata":{"tags":[]},"execution_count":14}]},{"cell_type":"code","metadata":{"id":"46dlASNxQEub","colab":{"base_uri":"https://localhost:8080/","height":257},"executionInfo":{"status":"ok","timestamp":1606196202374,"user_tz":-540,"elapsed":5558,"user":{"displayName":"최준영","photoUrl":"","userId":"02012717858183245906"}},"outputId":"10fce4b3-add8-4eb9-a6e3-214ddea95655"},"source":["train_df[[\"Parch\", \"Survived\"]].groupby(['Parch'], as_index=False).mean().sort_values(by='Survived', ascending=False)"],"execution_count":15,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Parch</th>\n","      <th>Survived</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>3</th>\n","      <td>3</td>\n","      <td>0.600000</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1</td>\n","      <td>0.550847</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>2</td>\n","      <td>0.500000</td>\n","    </tr>\n","    <tr>\n","      <th>0</th>\n","      <td>0</td>\n","      <td>0.343658</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>5</td>\n","      <td>0.200000</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>4</td>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>6</td>\n","      <td>0.000000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   Parch  Survived\n","3      3  0.600000\n","1      1  0.550847\n","2      2  0.500000\n","0      0  0.343658\n","5      5  0.200000\n","4      4  0.000000\n","6      6  0.000000"]},"metadata":{"tags":[]},"execution_count":15}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":313},"id":"bgRvqjZb6gjb","executionInfo":{"status":"ok","timestamp":1606196202808,"user_tz":-540,"elapsed":5984,"user":{"displayName":"최준영","photoUrl":"","userId":"02012717858183245906"}},"outputId":"543021bb-ff05-4e72-f49b-408e2ca218e8"},"source":["g = sns.FacetGrid(train_df, col='Survived')\n","g.map(plt.hist, 'Age', bins=20)"],"execution_count":16,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/numpy/lib/histograms.py:839: RuntimeWarning: invalid value encountered in greater_equal\n","  keep = (tmp_a >= first_edge)\n","/usr/local/lib/python3.6/dist-packages/numpy/lib/histograms.py:840: RuntimeWarning: invalid value encountered in less_equal\n","  keep &= (tmp_a <= last_edge)\n"],"name":"stderr"},{"output_type":"execute_result","data":{"text/plain":["<seaborn.axisgrid.FacetGrid at 0x7f23987eda20>"]},"metadata":{"tags":[]},"execution_count":16},{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 432x216 with 2 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":745},"id":"lMuJC6O37kr7","executionInfo":{"status":"ok","timestamp":1606196205737,"user_tz":-540,"elapsed":8904,"user":{"displayName":"최준영","photoUrl":"","userId":"02012717858183245906"}},"outputId":"fdd2f6e9-ddbf-42f4-86e5-d8de45a10dab"},"source":["grid = sns.FacetGrid(train_df, col='Survived', row='Pclass')\n","grid.map(plt.hist, 'Age', alpha=0.5, bins=20)\n","grid.add_legend()"],"execution_count":17,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/numpy/lib/histograms.py:839: RuntimeWarning: invalid value encountered in greater_equal\n","  keep = (tmp_a >= first_edge)\n","/usr/local/lib/python3.6/dist-packages/numpy/lib/histograms.py:840: RuntimeWarning: invalid value encountered in less_equal\n","  keep &= (tmp_a <= last_edge)\n"],"name":"stderr"},{"output_type":"execute_result","data":{"text/plain":["<seaborn.axisgrid.FacetGrid at 0x7f2394e5e320>"]},"metadata":{"tags":[]},"execution_count":17},{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 440x648 with 6 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":608},"id":"5ulzgxYc8aX-","executionInfo":{"status":"ok","timestamp":1606196206790,"user_tz":-540,"elapsed":9947,"user":{"displayName":"최준영","photoUrl":"","userId":"02012717858183245906"}},"outputId":"337027a1-f66e-4070-a7df-7db76b598dea"},"source":["  grid = sns.FacetGrid(train_df, row='Embarked', size=2.2, aspect=1.6)\n","  grid.map(sns.pointplot, 'Pclass','Survived','Sex', palette='deep')\n","  grid.add_legend()"],"execution_count":18,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/seaborn/axisgrid.py:316: UserWarning: The `size` parameter has been renamed to `height`; please update your code.\n","  warnings.warn(msg, UserWarning)\n","/usr/local/lib/python3.6/dist-packages/seaborn/axisgrid.py:645: UserWarning: Using the pointplot function without specifying `order` is likely to produce an incorrect plot.\n","  warnings.warn(warning)\n","/usr/local/lib/python3.6/dist-packages/seaborn/axisgrid.py:650: UserWarning: Using the pointplot function without specifying `hue_order` is likely to produce an incorrect plot.\n","  warnings.warn(warning)\n"],"name":"stderr"},{"output_type":"execute_result","data":{"text/plain":["<seaborn.axisgrid.FacetGrid at 0x7f239468f630>"]},"metadata":{"tags":[]},"execution_count":18},{"output_type":"display_data","data":{"image/png":"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\n","text/plain":["<Figure size 323.94x475.2 with 3 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":573},"id":"RCZQrV4x9jxk","executionInfo":{"status":"ok","timestamp":1606196208395,"user_tz":-540,"elapsed":11543,"user":{"displayName":"최준영","photoUrl":"","userId":"02012717858183245906"}},"outputId":"ab16d19e-4f28-4b31-f29a-480c8cad93db"},"source":["grid = sns.FacetGrid(train_df, row='Embarked', col='Survived', size=2.2, aspect=1.6)\n","grid.map(sns.barplot, 'Sex', 'Fare', alpha=.5, ci=None)\n","grid.add_legend()"],"execution_count":19,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/seaborn/axisgrid.py:316: UserWarning: The `size` parameter has been renamed to `height`; please update your code.\n","  warnings.warn(msg, UserWarning)\n","/usr/local/lib/python3.6/dist-packages/seaborn/axisgrid.py:645: UserWarning: Using the barplot function without specifying `order` is likely to produce an incorrect plot.\n","  warnings.warn(warning)\n"],"name":"stderr"},{"output_type":"execute_result","data":{"text/plain":["<seaborn.axisgrid.FacetGrid at 0x7f239452f2e8>"]},"metadata":{"tags":[]},"execution_count":19},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 514.88x475.2 with 6 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"id":"BThJepXT_WUy","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1606196208395,"user_tz":-540,"elapsed":11534,"user":{"displayName":"최준영","photoUrl":"","userId":"02012717858183245906"}},"outputId":"fd641537-1006-4244-c01b-83738f792558"},"source":["print(\"Before\", train_df.shape, test_df.shape, combine[0].shape, combine[1].shape)\n","\n","train_df = train_df.drop(['Ticket', 'Cabin'], axis = 1)\n","test_df = test_df.drop(['Ticket', 'Cabin'], axis = 1)\n","combine = [train_df, test_df]\n","\n","print(\"After\",train_df.shape, test_df.shape, combine[0].shape, combine[1].shape)"],"execution_count":20,"outputs":[{"output_type":"stream","text":["Before (891, 12) (418, 11) (891, 12) (418, 11)\n","After (891, 10) (418, 9) (891, 10) (418, 9)\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":587},"id":"8or2HemEEG7Q","executionInfo":{"status":"ok","timestamp":1606196208396,"user_tz":-540,"elapsed":11526,"user":{"displayName":"최준영","photoUrl":"","userId":"02012717858183245906"}},"outputId":"dc51882f-dfb6-422a-d7f1-b541d8129ef5"},"source":["for dataset in combine:\n","  dataset['Title'] = dataset.Name.str.extract('([A-Za-z]+)\\.', expand=False)\n","\n","pd.crosstab(train_df['Title'], train_df['Sex'])"],"execution_count":21,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th>Sex</th>\n","      <th>female</th>\n","      <th>male</th>\n","    </tr>\n","    <tr>\n","      <th>Title</th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>Capt</th>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>Col</th>\n","      <td>0</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>Countess</th>\n","      <td>1</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>Don</th>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>Dr</th>\n","      <td>1</td>\n","      <td>6</td>\n","    </tr>\n","    <tr>\n","      <th>Jonkheer</th>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>Lady</th>\n","      <td>1</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>Major</th>\n","      <td>0</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>Master</th>\n","      <td>0</td>\n","      <td>40</td>\n","    </tr>\n","    <tr>\n","      <th>Miss</th>\n","      <td>182</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>Mlle</th>\n","      <td>2</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>Mme</th>\n","      <td>1</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>Mr</th>\n","      <td>0</td>\n","      <td>517</td>\n","    </tr>\n","    <tr>\n","      <th>Mrs</th>\n","      <td>125</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>Ms</th>\n","      <td>1</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>Rev</th>\n","      <td>0</td>\n","      <td>6</td>\n","    </tr>\n","    <tr>\n","      <th>Sir</th>\n","      <td>0</td>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["Sex       female  male\n","Title                 \n","Capt           0     1\n","Col            0     2\n","Countess       1     0\n","Don            0     1\n","Dr             1     6\n","Jonkheer       0     1\n","Lady           1     0\n","Major          0     2\n","Master         0    40\n","Miss         182     0\n","Mlle           2     0\n","Mme            1     0\n","Mr             0   517\n","Mrs          125     0\n","Ms             1     0\n","Rev            0     6\n","Sir            0     1"]},"metadata":{"tags":[]},"execution_count":21}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":257},"id":"6jNQT0xPF3Wr","executionInfo":{"status":"ok","timestamp":1606196208396,"user_tz":-540,"elapsed":11518,"user":{"displayName":"최준영","photoUrl":"","userId":"02012717858183245906"}},"outputId":"4b0d2a81-fbbb-47c1-ab77-e0ea7db3ffff"},"source":["for dataset in combine:\n","  dataset['Title'] = dataset['Title'].replace(['Lady', 'Countess', 'Capt', 'Col', 'Don','Dr', 'Major', 'Rev', 'Sir', 'Jonkeer', 'Dona'], 'Rare')\n","  dataset['Title'] = dataset['Title'].replace('Mlle', 'Miss')\n","  dataset['Title'] = dataset['Title'].replace('Mme', 'Mrs')\n","\n","train_df[['Title', 'Survived']].groupby(['Title'], as_index=False).mean()"],"execution_count":22,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Title</th>\n","      <th>Survived</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Jonkheer</td>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>Master</td>\n","      <td>0.575000</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>Miss</td>\n","      <td>0.701087</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>Mr</td>\n","      <td>0.156673</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>Mrs</td>\n","      <td>0.793651</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>Ms</td>\n","      <td>1.000000</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>Rare</td>\n","      <td>0.363636</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["      Title  Survived\n","0  Jonkheer  0.000000\n","1    Master  0.575000\n","2      Miss  0.701087\n","3        Mr  0.156673\n","4       Mrs  0.793651\n","5        Ms  1.000000\n","6      Rare  0.363636"]},"metadata":{"tags":[]},"execution_count":22}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":197},"id":"xvZur-lqI78H","executionInfo":{"status":"ok","timestamp":1606196208397,"user_tz":-540,"elapsed":11509,"user":{"displayName":"최준영","photoUrl":"","userId":"02012717858183245906"}},"outputId":"beafa042-d123-4413-9bf3-02b2c936b2ea"},"source":["title_mapping = {\"Mr\": 1, \"Miss\" : 2, \"Mrs\":3, \"Master\":4, \"Rare\":5}\n","for dataset in combine:\n","  dataset['Title'] = dataset['Title'].map(title_mapping)\n","  dataset['Title'] = dataset['Title'].fillna(0)\n","\n","train_df.head()"],"execution_count":23,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>PassengerId</th>\n","      <th>Survived</th>\n","      <th>Pclass</th>\n","      <th>Name</th>\n","      <th>Sex</th>\n","      <th>Age</th>\n","      <th>SibSp</th>\n","      <th>Parch</th>\n","      <th>Fare</th>\n","      <th>Embarked</th>\n","      <th>Title</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>Braund, Mr. Owen Harris</td>\n","      <td>male</td>\n","      <td>22.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>7.2500</td>\n","      <td>S</td>\n","      <td>1.0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>Cumings, Mrs. John Bradley (Florence Briggs Th...</td>\n","      <td>female</td>\n","      <td>38.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>71.2833</td>\n","      <td>C</td>\n","      <td>3.0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>3</td>\n","      <td>1</td>\n","      <td>3</td>\n","      <td>Heikkinen, Miss. Laina</td>\n","      <td>female</td>\n","      <td>26.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>7.9250</td>\n","      <td>S</td>\n","      <td>2.0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>4</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>Futrelle, Mrs. Jacques Heath (Lily May Peel)</td>\n","      <td>female</td>\n","      <td>35.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>53.1000</td>\n","      <td>S</td>\n","      <td>3.0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>5</td>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>Allen, Mr. William Henry</td>\n","      <td>male</td>\n","      <td>35.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>8.0500</td>\n","      <td>S</td>\n","      <td>1.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   PassengerId  Survived  Pclass  ...     Fare Embarked  Title\n","0            1         0       3  ...   7.2500        S    1.0\n","1            2         1       1  ...  71.2833        C    3.0\n","2            3         1       3  ...   7.9250        S    2.0\n","3            4         1       1  ...  53.1000        S    3.0\n","4            5         0       3  ...   8.0500        S    1.0\n","\n","[5 rows x 11 columns]"]},"metadata":{"tags":[]},"execution_count":23}]},{"cell_type":"code","metadata":{"id":"EXNNFC4ZLDOM","executionInfo":{"status":"ok","timestamp":1606196208397,"user_tz":-540,"elapsed":11507,"user":{"displayName":"최준영","photoUrl":"","userId":"02012717858183245906"}}},"source":["train_df['Title'] = train_df['Title'].astype(int)"],"execution_count":24,"outputs":[]},{"cell_type":"code","metadata":{"id":"6-1eBva_LNl0","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1606196208397,"user_tz":-540,"elapsed":11499,"user":{"displayName":"최준영","photoUrl":"","userId":"02012717858183245906"}},"outputId":"db2ef2f1-9be5-4a7c-8f0b-56fcaa8de8b9"},"source":["train_df = train_df.drop(['Name', 'PassengerId'], axis = 1)\n","test_df = test_df.drop(['Name'], axis=1)\n","combine = [train_df, test_df]\n","\n","train_df.shape, test_df.shape"],"execution_count":25,"outputs":[{"output_type":"execute_result","data":{"text/plain":["((891, 9), (418, 9))"]},"metadata":{"tags":[]},"execution_count":25}]},{"cell_type":"code","metadata":{"id":"SeDxnboFOOA9","colab":{"base_uri":"https://localhost:8080/","height":197},"executionInfo":{"status":"ok","timestamp":1606196208398,"user_tz":-540,"elapsed":11491,"user":{"displayName":"최준영","photoUrl":"","userId":"02012717858183245906"}},"outputId":"b07b669e-43d9-455c-8103-17d065636226"},"source":["for dataset in combine:\n","  dataset['Sex'] = dataset['Sex'].map({'female' : 1, 'male' : 0}).astype(int)\n","\n","train_df.head()"],"execution_count":26,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Survived</th>\n","      <th>Pclass</th>\n","      <th>Sex</th>\n","      <th>Age</th>\n","      <th>SibSp</th>\n","      <th>Parch</th>\n","      <th>Fare</th>\n","      <th>Embarked</th>\n","      <th>Title</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>0</td>\n","      <td>22.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>7.2500</td>\n","      <td>S</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>38.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>71.2833</td>\n","      <td>C</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>1</td>\n","      <td>3</td>\n","      <td>1</td>\n","      <td>26.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>7.9250</td>\n","      <td>S</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>35.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>53.1000</td>\n","      <td>S</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>0</td>\n","      <td>35.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>8.0500</td>\n","      <td>S</td>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   Survived  Pclass  Sex   Age  SibSp  Parch     Fare Embarked  Title\n","0         0       3    0  22.0      1      0   7.2500        S      1\n","1         1       1    1  38.0      1      0  71.2833        C      3\n","2         1       3    1  26.0      0      0   7.9250        S      2\n","3         1       1    1  35.0      1      0  53.1000        S      3\n","4         0       3    0  35.0      0      0   8.0500        S      1"]},"metadata":{"tags":[]},"execution_count":26}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":197},"id":"2-pwN1RbOwqC","executionInfo":{"status":"ok","timestamp":1606196208398,"user_tz":-540,"elapsed":11483,"user":{"displayName":"최준영","photoUrl":"","userId":"02012717858183245906"}},"outputId":"c064f5b2-adf3-4eb2-fefd-64f42aa06711"},"source":["train_df.head()"],"execution_count":27,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Survived</th>\n","      <th>Pclass</th>\n","      <th>Sex</th>\n","      <th>Age</th>\n","      <th>SibSp</th>\n","      <th>Parch</th>\n","      <th>Fare</th>\n","      <th>Embarked</th>\n","      <th>Title</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>0</td>\n","      <td>22.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>7.2500</td>\n","      <td>S</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>38.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>71.2833</td>\n","      <td>C</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>1</td>\n","      <td>3</td>\n","      <td>1</td>\n","      <td>26.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>7.9250</td>\n","      <td>S</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>35.0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>53.1000</td>\n","      <td>S</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>0</td>\n","      <td>35.0</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>8.0500</td>\n","      <td>S</td>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   Survived  Pclass  Sex   Age  SibSp  Parch     Fare Embarked  Title\n","0         0       3    0  22.0      1      0   7.2500        S      1\n","1         1       1    1  38.0      1      0  71.2833        C      3\n","2         1       3    1  26.0      0      0   7.9250        S      2\n","3         1       1    1  35.0      1      0  53.1000        S      3\n","4         0       3    0  35.0      0      0   8.0500        S      1"]},"metadata":{"tags":[]},"execution_count":27}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":608},"id":"RUgrqYAbPG3Z","executionInfo":{"status":"ok","timestamp":1606196211429,"user_tz":-540,"elapsed":14505,"user":{"displayName":"최준영","photoUrl":"","userId":"02012717858183245906"}},"outputId":"e13aefb1-fa17-4456-d7ab-666d9769ed17"},"source":["grid = sns.FacetGrid(train_df, row='Pclass', col='Sex', size=2.2, aspect=1.6)\n","grid.map(plt.hist, 'Age', alpha = .5, bins=20)\n","grid.add_legend()"],"execution_count":28,"outputs":[{"output_type":"stream","text":["/usr/local/lib/python3.6/dist-packages/seaborn/axisgrid.py:316: UserWarning: The `size` parameter has been renamed to `height`; please update your code.\n","  warnings.warn(msg, UserWarning)\n","/usr/local/lib/python3.6/dist-packages/numpy/lib/histograms.py:839: RuntimeWarning: invalid value encountered in greater_equal\n","  keep = (tmp_a >= first_edge)\n","/usr/local/lib/python3.6/dist-packages/numpy/lib/histograms.py:840: RuntimeWarning: invalid value encountered in less_equal\n","  keep &= (tmp_a <= last_edge)\n"],"name":"stderr"},{"output_type":"execute_result","data":{"text/plain":["<seaborn.axisgrid.FacetGrid at 0x7f2398a85518>"]},"metadata":{"tags":[]},"execution_count":28},{"output_type":"display_data","data":{"image/png":"\n","text/plain":["<Figure size 514.88x475.2 with 6 Axes>"]},"metadata":{"tags":[],"needs_background":"light"}}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"m31fq0yBTdpM","executionInfo":{"status":"ok","timestamp":1606196211430,"user_tz":-540,"elapsed":14497,"user":{"displayName":"최준영","photoUrl":"","userId":"02012717858183245906"}},"outputId":"5fc92696-8c5f-4bbf-d5d0-5c32216bb6ab"},"source":["guess_ages = np.zeros((2,3))\n","guess_ages"],"execution_count":29,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([[0., 0., 0.],\n","       [0., 0., 0.]])"]},"metadata":{"tags":[]},"execution_count":29}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":197},"id":"P2vcIELnUnd1","executionInfo":{"status":"ok","timestamp":1606196211430,"user_tz":-540,"elapsed":14489,"user":{"displayName":"최준영","photoUrl":"","userId":"02012717858183245906"}},"outputId":"7bb726df-9a10-4449-baf6-ac35ad2448c9"},"source":["for dataset in combine:\n","  for i in range(0,2):\n","    for j in range(0,3):\n","      guess_df = dataset[(dataset['Sex']==i) & (dataset['Pclass']== j+1)]['Age'].dropna()\n","\n","      \n","      age_guess = guess_df.median()\n","\n","      guess_ages[i,j] = int(age_guess/0.5 + 0.5) + 0.5\n","\n","  for i in range(0,2):\n","    for j in range(0,3):\n","      dataset.loc[(dataset.Age.isnull()) & (dataset.Sex == i) & (dataset.Pclass == j+1), 'Age'] = guess_ages[i,j]\n","\n","  dataset['Age'] = dataset['Age'].astype(int)\n","\n","train_df.head()"],"execution_count":30,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Survived</th>\n","      <th>Pclass</th>\n","      <th>Sex</th>\n","      <th>Age</th>\n","      <th>SibSp</th>\n","      <th>Parch</th>\n","      <th>Fare</th>\n","      <th>Embarked</th>\n","      <th>Title</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>0</td>\n","      <td>22</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>7.2500</td>\n","      <td>S</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>38</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>71.2833</td>\n","      <td>C</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>1</td>\n","      <td>3</td>\n","      <td>1</td>\n","      <td>26</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>7.9250</td>\n","      <td>S</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>35</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>53.1000</td>\n","      <td>S</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>0</td>\n","      <td>35</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>8.0500</td>\n","      <td>S</td>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   Survived  Pclass  Sex  Age  SibSp  Parch     Fare Embarked  Title\n","0         0       3    0   22      1      0   7.2500        S      1\n","1         1       1    1   38      1      0  71.2833        C      3\n","2         1       3    1   26      0      0   7.9250        S      2\n","3         1       1    1   35      1      0  53.1000        S      3\n","4         0       3    0   35      0      0   8.0500        S      1"]},"metadata":{"tags":[]},"execution_count":30}]},{"cell_type":"code","metadata":{"id":"-I-7Nw3_WcaM","colab":{"base_uri":"https://localhost:8080/","height":197},"executionInfo":{"status":"ok","timestamp":1606196211431,"user_tz":-540,"elapsed":14482,"user":{"displayName":"최준영","photoUrl":"","userId":"02012717858183245906"}},"outputId":"0fc5111a-f0a4-49e5-d08b-c157d7551735"},"source":["train_df['AgeBand'] = pd.cut(train_df['Age'], 5)\n","train_df[['AgeBand', 'Survived']].groupby(['AgeBand'], as_index=False).mean().sort_values(by='AgeBand', ascending=True)"],"execution_count":31,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>AgeBand</th>\n","      <th>Survived</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>(-0.08, 16.0]</td>\n","      <td>0.550000</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>(16.0, 32.0]</td>\n","      <td>0.370690</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>(32.0, 48.0]</td>\n","      <td>0.438596</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>(48.0, 64.0]</td>\n","      <td>0.247126</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>(64.0, 80.0]</td>\n","      <td>0.365854</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["         AgeBand  Survived\n","0  (-0.08, 16.0]  0.550000\n","1   (16.0, 32.0]  0.370690\n","2   (32.0, 48.0]  0.438596\n","3   (48.0, 64.0]  0.247126\n","4   (64.0, 80.0]  0.365854"]},"metadata":{"tags":[]},"execution_count":31}]},{"cell_type":"code","metadata":{"id":"Dsuz3XOxhrFG","colab":{"base_uri":"https://localhost:8080/","height":197},"executionInfo":{"status":"ok","timestamp":1606196211431,"user_tz":-540,"elapsed":14465,"user":{"displayName":"최준영","photoUrl":"","userId":"02012717858183245906"}},"outputId":"51d29fae-4c59-4d8a-c8cf-04c69e8f7873"},"source":["for dataset in combine:    \n","    dataset.loc[ dataset['Age'] <= 16, 'Age'] = 0\n","    dataset.loc[(dataset['Age'] > 16) & (dataset['Age'] <= 32), 'Age'] = 1\n","    dataset.loc[(dataset['Age'] > 32) & (dataset['Age'] <= 48), 'Age'] = 2\n","    dataset.loc[(dataset['Age'] > 48) & (dataset['Age'] <= 64), 'Age'] = 3\n","    dataset.loc[ dataset['Age'] > 64, 'Age']\n","train_df.head()"],"execution_count":32,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Survived</th>\n","      <th>Pclass</th>\n","      <th>Sex</th>\n","      <th>Age</th>\n","      <th>SibSp</th>\n","      <th>Parch</th>\n","      <th>Fare</th>\n","      <th>Embarked</th>\n","      <th>Title</th>\n","      <th>AgeBand</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>7.2500</td>\n","      <td>S</td>\n","      <td>1</td>\n","      <td>(16.0, 32.0]</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>71.2833</td>\n","      <td>C</td>\n","      <td>3</td>\n","      <td>(32.0, 48.0]</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>1</td>\n","      <td>3</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>7.9250</td>\n","      <td>S</td>\n","      <td>2</td>\n","      <td>(16.0, 32.0]</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>53.1000</td>\n","      <td>S</td>\n","      <td>3</td>\n","      <td>(32.0, 48.0]</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>0</td>\n","      <td>2</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>8.0500</td>\n","      <td>S</td>\n","      <td>1</td>\n","      <td>(32.0, 48.0]</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   Survived  Pclass  Sex  Age  ...     Fare  Embarked  Title       AgeBand\n","0         0       3    0    1  ...   7.2500         S      1  (16.0, 32.0]\n","1         1       1    1    2  ...  71.2833         C      3  (32.0, 48.0]\n","2         1       3    1    1  ...   7.9250         S      2  (16.0, 32.0]\n","3         1       1    1    2  ...  53.1000         S      3  (32.0, 48.0]\n","4         0       3    0    2  ...   8.0500         S      1  (32.0, 48.0]\n","\n","[5 rows x 10 columns]"]},"metadata":{"tags":[]},"execution_count":32}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":197},"id":"mSfAu9vv1gnT","executionInfo":{"status":"ok","timestamp":1606196211432,"user_tz":-540,"elapsed":14455,"user":{"displayName":"최준영","photoUrl":"","userId":"02012717858183245906"}},"outputId":"663d70a0-57d6-44dc-fba4-7f5227e1fd28"},"source":["train_df = train_df.drop(['AgeBand'], axis=1)\n","combine = [train_df, test_df]\n","train_df.head()"],"execution_count":33,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Survived</th>\n","      <th>Pclass</th>\n","      <th>Sex</th>\n","      <th>Age</th>\n","      <th>SibSp</th>\n","      <th>Parch</th>\n","      <th>Fare</th>\n","      <th>Embarked</th>\n","      <th>Title</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>7.2500</td>\n","      <td>S</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>71.2833</td>\n","      <td>C</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>1</td>\n","      <td>3</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>7.9250</td>\n","      <td>S</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>53.1000</td>\n","      <td>S</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>0</td>\n","      <td>2</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>8.0500</td>\n","      <td>S</td>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   Survived  Pclass  Sex  Age  SibSp  Parch     Fare Embarked  Title\n","0         0       3    0    1      1      0   7.2500        S      1\n","1         1       1    1    2      1      0  71.2833        C      3\n","2         1       3    1    1      0      0   7.9250        S      2\n","3         1       1    1    2      1      0  53.1000        S      3\n","4         0       3    0    2      0      0   8.0500        S      1"]},"metadata":{"tags":[]},"execution_count":33}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":317},"id":"mChyVpY22hpK","executionInfo":{"status":"ok","timestamp":1606196211432,"user_tz":-540,"elapsed":14445,"user":{"displayName":"최준영","photoUrl":"","userId":"02012717858183245906"}},"outputId":"e37960b6-b3bc-4d4b-d796-10a84d3505af"},"source":["for dataset in combine:\n","  dataset['FamilySize'] = dataset['SibSp'] + dataset['Parch'] + 1\n","\n","train_df[['FamilySize', 'Survived']].groupby(['FamilySize'], as_index=False).mean().sort_values(by='Survived',ascending=False)\n"," "],"execution_count":34,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>FamilySize</th>\n","      <th>Survived</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>3</th>\n","      <td>4</td>\n","      <td>0.724138</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>3</td>\n","      <td>0.578431</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2</td>\n","      <td>0.552795</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>7</td>\n","      <td>0.333333</td>\n","    </tr>\n","    <tr>\n","      <th>0</th>\n","      <td>1</td>\n","      <td>0.303538</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>5</td>\n","      <td>0.200000</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>6</td>\n","      <td>0.136364</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>8</td>\n","      <td>0.000000</td>\n","    </tr>\n","    <tr>\n","      <th>8</th>\n","      <td>11</td>\n","      <td>0.000000</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   FamilySize  Survived\n","3           4  0.724138\n","2           3  0.578431\n","1           2  0.552795\n","6           7  0.333333\n","0           1  0.303538\n","4           5  0.200000\n","5           6  0.136364\n","7           8  0.000000\n","8          11  0.000000"]},"metadata":{"tags":[]},"execution_count":34}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":137},"id":"26dLifQX46cO","executionInfo":{"status":"ok","timestamp":1606196211433,"user_tz":-540,"elapsed":14435,"user":{"displayName":"최준영","photoUrl":"","userId":"02012717858183245906"}},"outputId":"e5a040b9-c302-4431-a98c-9140e2ed1336"},"source":["for dataset in combine:\n","  dataset['IsAlone'] = 0\n","  dataset.loc[dataset['FamilySize']==1, 'IsAlone']=1\n","\n","train_df[['IsAlone','Survived']].groupby(['IsAlone'], as_index=True).mean()\n"],"execution_count":35,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Survived</th>\n","    </tr>\n","    <tr>\n","      <th>IsAlone</th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0.505650</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>0.303538</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["         Survived\n","IsAlone          \n","0        0.505650\n","1        0.303538"]},"metadata":{"tags":[]},"execution_count":35}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":197},"id":"oh2FIL6a6kY9","executionInfo":{"status":"ok","timestamp":1606196211434,"user_tz":-540,"elapsed":14425,"user":{"displayName":"최준영","photoUrl":"","userId":"02012717858183245906"}},"outputId":"35607e94-2888-4e1f-c23c-99d6671bdac6"},"source":["train_df = train_df.drop(['Parch','SibSp','FamilySize'], axis=1)\n","test_df = test_df.drop(['Parch','SibSp','FamilySize'], axis=1)\n","combine = [train_df,test_df]\n","\n","train_df.head()"],"execution_count":36,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Survived</th>\n","      <th>Pclass</th>\n","      <th>Sex</th>\n","      <th>Age</th>\n","      <th>Fare</th>\n","      <th>Embarked</th>\n","      <th>Title</th>\n","      <th>IsAlone</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>7.2500</td>\n","      <td>S</td>\n","      <td>1</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>2</td>\n","      <td>71.2833</td>\n","      <td>C</td>\n","      <td>3</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>1</td>\n","      <td>3</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>7.9250</td>\n","      <td>S</td>\n","      <td>2</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>2</td>\n","      <td>53.1000</td>\n","      <td>S</td>\n","      <td>3</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>0</td>\n","      <td>2</td>\n","      <td>8.0500</td>\n","      <td>S</td>\n","      <td>1</td>\n","      <td>1</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   Survived  Pclass  Sex  Age     Fare Embarked  Title  IsAlone\n","0         0       3    0    1   7.2500        S      1        0\n","1         1       1    1    2  71.2833        C      3        0\n","2         1       3    1    1   7.9250        S      2        1\n","3         1       1    1    2  53.1000        S      3        0\n","4         0       3    0    2   8.0500        S      1        1"]},"metadata":{"tags":[]},"execution_count":36}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":197},"id":"dXd2QeoT8vQ5","executionInfo":{"status":"ok","timestamp":1606196211434,"user_tz":-540,"elapsed":14415,"user":{"displayName":"최준영","photoUrl":"","userId":"02012717858183245906"}},"outputId":"06ac5473-b61d-4873-9f75-b957a818a533"},"source":["for dataset in combine:\n","  dataset['Age*Class'] = dataset['Age']*dataset['Pclass']\n","\n","train_df.loc[:,['Age*Class','Age','Pclass']].head()\n","\n"],"execution_count":37,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Age*Class</th>\n","      <th>Age</th>\n","      <th>Pclass</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>3</td>\n","      <td>1</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>3</td>\n","      <td>1</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>2</td>\n","      <td>2</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>6</td>\n","      <td>2</td>\n","      <td>3</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   Age*Class  Age  Pclass\n","0          3    1       3\n","1          2    2       1\n","2          3    1       3\n","3          2    2       1\n","4          6    2       3"]},"metadata":{"tags":[]},"execution_count":37}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":34},"id":"TtzIDKpj9sfF","executionInfo":{"status":"ok","timestamp":1606196211434,"user_tz":-540,"elapsed":14405,"user":{"displayName":"최준영","photoUrl":"","userId":"02012717858183245906"}},"outputId":"767fade0-9fba-4348-ece3-0c06ccc979d1"},"source":["freq_port = train_df.Embarked.dropna().mode()[0]\n","freq_port"],"execution_count":38,"outputs":[{"output_type":"execute_result","data":{"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"},"text/plain":["'S'"]},"metadata":{"tags":[]},"execution_count":38}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":137},"id":"xAIhggUx-y4a","executionInfo":{"status":"ok","timestamp":1606196211435,"user_tz":-540,"elapsed":14397,"user":{"displayName":"최준영","photoUrl":"","userId":"02012717858183245906"}},"outputId":"a6e42f0a-fd79-418b-d1ef-d13db068d1bb"},"source":["for dataset in combine:\n","  dataset['Embarked'] = dataset['Embarked'].fillna(freq_port)\n","\n","train_df[['Embarked','Survived']].groupby(['Embarked'], as_index=False).mean().sort_values(by='Survived', ascending=False)"],"execution_count":39,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Embarked</th>\n","      <th>Survived</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>C</td>\n","      <td>0.553571</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>Q</td>\n","      <td>0.389610</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>S</td>\n","      <td>0.339009</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["  Embarked  Survived\n","0        C  0.553571\n","1        Q  0.389610\n","2        S  0.339009"]},"metadata":{"tags":[]},"execution_count":39}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":197},"id":"fcbAtVR5CCFr","executionInfo":{"status":"ok","timestamp":1606196211435,"user_tz":-540,"elapsed":14388,"user":{"displayName":"최준영","photoUrl":"","userId":"02012717858183245906"}},"outputId":"ad590a32-51b0-4139-9f02-176fca91a759"},"source":["for dataset in combine:\n","  dataset['Embarked'] = dataset['Embarked'].map({'S':0,'C':1,'Q':2}).astype(int)\n","\n","train_df.head()"],"execution_count":40,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Survived</th>\n","      <th>Pclass</th>\n","      <th>Sex</th>\n","      <th>Age</th>\n","      <th>Fare</th>\n","      <th>Embarked</th>\n","      <th>Title</th>\n","      <th>IsAlone</th>\n","      <th>Age*Class</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>7.2500</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>2</td>\n","      <td>71.2833</td>\n","      <td>1</td>\n","      <td>3</td>\n","      <td>0</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>1</td>\n","      <td>3</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>7.9250</td>\n","      <td>0</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>2</td>\n","      <td>53.1000</td>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>0</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>0</td>\n","      <td>2</td>\n","      <td>8.0500</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>6</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   Survived  Pclass  Sex  Age     Fare  Embarked  Title  IsAlone  Age*Class\n","0         0       3    0    1   7.2500         0      1        0          3\n","1         1       1    1    2  71.2833         1      3        0          2\n","2         1       3    1    1   7.9250         0      2        1          3\n","3         1       1    1    2  53.1000         0      3        0          2\n","4         0       3    0    2   8.0500         0      1        1          6"]},"metadata":{"tags":[]},"execution_count":40}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":197},"id":"-k0NjOSqCwmo","executionInfo":{"status":"ok","timestamp":1606196211740,"user_tz":-540,"elapsed":14684,"user":{"displayName":"최준영","photoUrl":"","userId":"02012717858183245906"}},"outputId":"3362a9e9-ee35-4c14-d64a-3ea25de307dd"},"source":["test_df['Fare'].fillna(test_df['Fare'].dropna().median(), inplace=True)\n","test_df.head()"],"execution_count":41,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>PassengerId</th>\n","      <th>Pclass</th>\n","      <th>Sex</th>\n","      <th>Age</th>\n","      <th>Fare</th>\n","      <th>Embarked</th>\n","      <th>Title</th>\n","      <th>IsAlone</th>\n","      <th>Age*Class</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>892</td>\n","      <td>3</td>\n","      <td>0</td>\n","      <td>2</td>\n","      <td>7.8292</td>\n","      <td>2</td>\n","      <td>1.0</td>\n","      <td>1</td>\n","      <td>6</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>893</td>\n","      <td>3</td>\n","      <td>1</td>\n","      <td>2</td>\n","      <td>7.0000</td>\n","      <td>0</td>\n","      <td>3.0</td>\n","      <td>0</td>\n","      <td>6</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>894</td>\n","      <td>2</td>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>9.6875</td>\n","      <td>2</td>\n","      <td>1.0</td>\n","      <td>1</td>\n","      <td>6</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>895</td>\n","      <td>3</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>8.6625</td>\n","      <td>0</td>\n","      <td>1.0</td>\n","      <td>1</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>896</td>\n","      <td>3</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>12.2875</td>\n","      <td>0</td>\n","      <td>3.0</td>\n","      <td>0</td>\n","      <td>3</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   PassengerId  Pclass  Sex  Age     Fare  Embarked  Title  IsAlone  Age*Class\n","0          892       3    0    2   7.8292         2    1.0        1          6\n","1          893       3    1    2   7.0000         0    3.0        0          6\n","2          894       2    0    3   9.6875         2    1.0        1          6\n","3          895       3    0    1   8.6625         0    1.0        1          3\n","4          896       3    1    1  12.2875         0    3.0        0          3"]},"metadata":{"tags":[]},"execution_count":41}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":167},"id":"sq1R2wnGFDU5","executionInfo":{"status":"ok","timestamp":1606196211740,"user_tz":-540,"elapsed":14675,"user":{"displayName":"최준영","photoUrl":"","userId":"02012717858183245906"}},"outputId":"d52ad8d3-6d83-4d9a-91ee-c20b32087e63"},"source":["train_df['FareBand'] = pd.qcut(train_df['Fare'], 4)\n","\n","train_df[['FareBand','Survived']].groupby('FareBand',as_index=False).mean().sort_values(by='FareBand', ascending=True)"],"execution_count":42,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>FareBand</th>\n","      <th>Survived</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>(-0.001, 7.91]</td>\n","      <td>0.197309</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>(7.91, 14.454]</td>\n","      <td>0.303571</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>(14.454, 31.0]</td>\n","      <td>0.454955</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>(31.0, 512.329]</td>\n","      <td>0.581081</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["          FareBand  Survived\n","0   (-0.001, 7.91]  0.197309\n","1   (7.91, 14.454]  0.303571\n","2   (14.454, 31.0]  0.454955\n","3  (31.0, 512.329]  0.581081"]},"metadata":{"tags":[]},"execution_count":42}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":347},"id":"3OS9uqYuGLNi","executionInfo":{"status":"ok","timestamp":1606196211741,"user_tz":-540,"elapsed":14666,"user":{"displayName":"최준영","photoUrl":"","userId":"02012717858183245906"}},"outputId":"d4b3c138-791e-411d-da25-8819af609e9a"},"source":["for dataset in combine:\n","    dataset.loc[ dataset['Fare'] <= 7.91, 'Fare'] = 0\n","    dataset.loc[(dataset['Fare'] > 7.91) & (dataset['Fare'] <= 14.454), 'Fare'] = 1\n","    dataset.loc[(dataset['Fare'] > 14.454) & (dataset['Fare'] <= 31), 'Fare']   = 2\n","    dataset.loc[ dataset['Fare'] > 31, 'Fare'] = 3\n","    dataset['Fare'] = dataset['Fare'].astype(int)\n","\n","train_df = train_df.drop(['FareBand'], axis=1)\n","combine = [train_df, test_df]\n","    \n","train_df.head(10)"],"execution_count":43,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Survived</th>\n","      <th>Pclass</th>\n","      <th>Sex</th>\n","      <th>Age</th>\n","      <th>Fare</th>\n","      <th>Embarked</th>\n","      <th>Title</th>\n","      <th>IsAlone</th>\n","      <th>Age*Class</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>2</td>\n","      <td>3</td>\n","      <td>1</td>\n","      <td>3</td>\n","      <td>0</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>1</td>\n","      <td>3</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>2</td>\n","      <td>3</td>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>0</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>0</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>6</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>1</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>9</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>3</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>2</td>\n","      <td>0</td>\n","      <td>4</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>8</th>\n","      <td>1</td>\n","      <td>3</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>0</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>9</th>\n","      <td>1</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>2</td>\n","      <td>1</td>\n","      <td>3</td>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   Survived  Pclass  Sex  Age  Fare  Embarked  Title  IsAlone  Age*Class\n","0         0       3    0    1     0         0      1        0          3\n","1         1       1    1    2     3         1      3        0          2\n","2         1       3    1    1     1         0      2        1          3\n","3         1       1    1    2     3         0      3        0          2\n","4         0       3    0    2     1         0      1        1          6\n","5         0       3    0    3     1         2      1        1          9\n","6         0       1    0    3     3         0      1        1          3\n","7         0       3    0    0     2         0      4        0          0\n","8         1       3    1    1     1         0      3        0          3\n","9         1       2    1    0     2         1      3        0          0"]},"metadata":{"tags":[]},"execution_count":43}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":197},"id":"-7ga41KcGU8E","executionInfo":{"status":"ok","timestamp":1606196211741,"user_tz":-540,"elapsed":14658,"user":{"displayName":"최준영","photoUrl":"","userId":"02012717858183245906"}},"outputId":"cfe30886-e008-4ece-acb5-d27b2013a40d"},"source":["test_df.head()"],"execution_count":44,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>PassengerId</th>\n","      <th>Pclass</th>\n","      <th>Sex</th>\n","      <th>Age</th>\n","      <th>Fare</th>\n","      <th>Embarked</th>\n","      <th>Title</th>\n","      <th>IsAlone</th>\n","      <th>Age*Class</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>892</td>\n","      <td>3</td>\n","      <td>0</td>\n","      <td>2</td>\n","      <td>0</td>\n","      <td>2</td>\n","      <td>1.0</td>\n","      <td>1</td>\n","      <td>6</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>893</td>\n","      <td>3</td>\n","      <td>1</td>\n","      <td>2</td>\n","      <td>0</td>\n","      <td>0</td>\n","      <td>3.0</td>\n","      <td>0</td>\n","      <td>6</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>894</td>\n","      <td>2</td>\n","      <td>0</td>\n","      <td>3</td>\n","      <td>1</td>\n","      <td>2</td>\n","      <td>1.0</td>\n","      <td>1</td>\n","      <td>6</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>895</td>\n","      <td>3</td>\n","      <td>0</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>1.0</td>\n","      <td>1</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>896</td>\n","      <td>3</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>1</td>\n","      <td>0</td>\n","      <td>3.0</td>\n","      <td>0</td>\n","      <td>3</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["   PassengerId  Pclass  Sex  Age  Fare  Embarked  Title  IsAlone  Age*Class\n","0          892       3    0    2     0         2    1.0        1          6\n","1          893       3    1    2     0         0    3.0        0          6\n","2          894       2    0    3     1         2    1.0        1          6\n","3          895       3    0    1     1         0    1.0        1          3\n","4          896       3    1    1     1         0    3.0        0          3"]},"metadata":{"tags":[]},"execution_count":44}]},{"cell_type":"code","metadata":{"id":"P-SsXBbwGbRz","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1606196211741,"user_tz":-540,"elapsed":14649,"user":{"displayName":"최준영","photoUrl":"","userId":"02012717858183245906"}},"outputId":"6f6cd069-10c6-4f37-b6cd-3f11bd40d775"},"source":["X_train = train_df.drop('Survived', axis=1)\n","Y_train = train_df.Survived\n","X_test = test_df.drop('PassengerId',axis=1).copy()\n","\n","X_train.shape, Y_train.shape, X_test.shape\n"],"execution_count":45,"outputs":[{"output_type":"execute_result","data":{"text/plain":["((891, 8), (891,), (418, 8))"]},"metadata":{"tags":[]},"execution_count":45}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"uvjXSd4FwLqU","executionInfo":{"status":"ok","timestamp":1606196398083,"user_tz":-540,"elapsed":2969,"user":{"displayName":"최준영","photoUrl":"","userId":"02012717858183245906"}},"outputId":"38d86878-3419-4b05-c2bd-e3c52042b432"},"source":["#Logistic Regression\n","logreg = LogisticRegression()\n","logreg.fit(X_train,Y_train)\n","Y_pred = logreg.predict(X_test)\n","acc_log = round(logreg.score(X_train,Y_train)*100,2)\n","acc_log"],"execution_count":48,"outputs":[{"output_type":"execute_result","data":{"text/plain":["80.02"]},"metadata":{"tags":[]},"execution_count":48}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/","height":287},"id":"1jbGWudvwz8C","executionInfo":{"status":"ok","timestamp":1606197716688,"user_tz":-540,"elapsed":3074,"user":{"displayName":"최준영","photoUrl":"","userId":"02012717858183245906"}},"outputId":"0802c2df-c465-402c-d7f4-e7bced84c4b1"},"source":["coeff_df = pd.DataFrame(train_df.columns.delete(0))\n","coeff_df.columns = ['Feature']\n","coeff_df['Correlation'] = pd.Series(logreg.coef_[0])\n","\n","coeff_df.sort_values(by='Correlation', ascending=False)"],"execution_count":49,"outputs":[{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>Feature</th>\n","      <th>Correlation</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>1</th>\n","      <td>Sex</td>\n","      <td>2.135418</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>Title</td>\n","      <td>0.406655</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>Embarked</td>\n","      <td>0.373929</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>IsAlone</td>\n","      <td>0.174119</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>Age</td>\n","      <td>0.171101</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>Fare</td>\n","      <td>-0.075269</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>Age*Class</td>\n","      <td>-0.182976</td>\n","    </tr>\n","    <tr>\n","      <th>0</th>\n","      <td>Pclass</td>\n","      <td>-0.834095</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["     Feature  Correlation\n","1        Sex     2.135418\n","5      Title     0.406655\n","4   Embarked     0.373929\n","6    IsAlone     0.174119\n","2        Age     0.171101\n","3       Fare    -0.075269\n","7  Age*Class    -0.182976\n","0     Pclass    -0.834095"]},"metadata":{"tags":[]},"execution_count":49}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"dO109l1t2Bp9","executionInfo":{"status":"ok","timestamp":1606198361158,"user_tz":-540,"elapsed":3400,"user":{"displayName":"최준영","photoUrl":"","userId":"02012717858183245906"}},"outputId":"34e35761-b244-4d68-a878-2cfeba32a3ad"},"source":["#Support Vector Machine\n","svc = SVC()\n","svc.fit(X_train, Y_train)\n","Y_pred = svc.predict(X_test)\n","acc_svc = round(svc.score(X_train,Y_train)*100, 2)\n","acc_svc"],"execution_count":52,"outputs":[{"output_type":"execute_result","data":{"text/plain":["77.89"]},"metadata":{"tags":[]},"execution_count":52}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"YTzjQZ793xAh","executionInfo":{"status":"ok","timestamp":1606198488976,"user_tz":-540,"elapsed":6338,"user":{"displayName":"최준영","photoUrl":"","userId":"02012717858183245906"}},"outputId":"9ff98918-6302-4032-853f-cb17c79976ab"},"source":["#Knn\n","\n","knn = KNeighborsClassifier(n_neighbors=3)\n","knn.fit(X_train, Y_train)\n","Y_pred = knn.predict(X_test)\n","acc_knn = round(knn.score(X_train, Y_train)*100,2)\n","acc_knn"],"execution_count":53,"outputs":[{"output_type":"execute_result","data":{"text/plain":["85.63"]},"metadata":{"tags":[]},"execution_count":53}]},{"cell_type":"code","metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Voo4HdeK49aL","executionInfo":{"status":"ok","timestamp":1606199051296,"user_tz":-540,"elapsed":665,"user":{"displayName":"최준영","photoUrl":"","userId":"02012717858183245906"}},"outputId":"bb287f08-8ac0-4153-e5f1-c55268c7a8b7"},"source":["gaussian = GaussianNB()\n","gaussian.fit(X_train, Y_train)\n","Y_pred = gaussian.predict(X_test)\n","acc_gaussian = round(gaussian.score(X_train, Y_train),2)\n","acc_gaussian"],"execution_count":54,"outputs":[{"output_type":"execute_result","data":{"text/plain":["0.77"]},"metadata":{"tags":[]},"execution_count":54}]},{"cell_type":"code","metadata":{"id":"UlDb7fxR7IE7"},"source":[""],"execution_count":null,"outputs":[]}]}