{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"4장_분류_GBM(Gradient Boosting Machine)","provenance":[],"mount_file_id":"1RdLmPIyWuzz5MZlwsXmZwf1AQ9LjmDAq","authorship_tag":"ABX9TyNEU201a7Zd/RhMzmpR/jeI"},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"code","metadata":{"id":"boAjpvnrFGdD","colab_type":"code","colab":{},"executionInfo":{"status":"ok","timestamp":1597125208436,"user_tz":-540,"elapsed":955,"user":{"displayName":"최준영","photoUrl":"","userId":"02012717858183245906"}}},"source":["def get_new_feature_name_df(old_feature_name_df):\n","  feature_dup_df = pd.DataFrame(data=old_feature_name_df.groupby('column_name').cumcount(),columns=['dup_cnt'])\n","  feature_dup_df = feature_dup_df.reset_index()\n","  new_feature_name_df = pd.merge(old_feature_name_df.reset_index(), feature_dup_df, how='outer')\n","  new_feature_name_df['column_name'] = new_feature_name_df[['column_name', 'dup_cnt']].apply(lambda x: x[0]+'_'+str(x[1]) if x[1]>0 else x[0], axis=1)\n","  new_feature_name_df = new_feature_name_df.drop(['index'], axis=1)\n","  return new_feature_name_df"],"execution_count":1,"outputs":[]},{"cell_type":"code","metadata":{"id":"cjqTlcE4FIGQ","colab_type":"code","colab":{},"executionInfo":{"status":"ok","timestamp":1597125264395,"user_tz":-540,"elapsed":16326,"user":{"displayName":"최준영","photoUrl":"","userId":"02012717858183245906"}}},"source":["import pandas as pd\n","\n","def get_human_dataset( ):\n","    \n","    # 각 데이터 파일들은 공백으로 분리되어 있으므로 read_csv에서 공백 문자를 sep으로 할당.\n","    feature_name_df = pd.read_csv('/content/drive/My Drive/Colab Notebooks/data/human_activity/features.txt',sep='\\s+',\n","                        header=None,names=['column_index','column_name'])\n","    \n","    # 중복된 feature명을 새롭게 수정하는 get_new_feature_name_df()를 이용하여 새로운 feature명 DataFrame생성. \n","    new_feature_name_df = get_new_feature_name_df(feature_name_df)\n","    \n","    # DataFrame에 피처명을 컬럼으로 부여하기 위해 리스트 객체로 다시 변환\n","    feature_name = new_feature_name_df.iloc[:, 1].values.tolist()\n","    \n","    # 학습 피처 데이터 셋과 테스트 피처 데이터을 DataFrame으로 로딩. 컬럼명은 feature_name 적용\n","    X_train = pd.read_csv('/content/drive/My Drive/Colab Notebooks/data/human_activity/train/X_train.txt',sep='\\s+', names=feature_name )\n","    X_test = pd.read_csv('/content/drive/My Drive/Colab Notebooks/data/human_activity/test/X_test.txt',sep='\\s+', names=feature_name)\n","    \n","    # 학습 레이블과 테스트 레이블 데이터을 DataFrame으로 로딩하고 컬럼명은 action으로 부여\n","    y_train = pd.read_csv('/content/drive/My Drive/Colab Notebooks/data/human_activity/train/y_train.txt',sep='\\s+',header=None,names=['action'])\n","    y_test = pd.read_csv('/content/drive/My Drive/Colab Notebooks/data/human_activity/test/y_test.txt',sep='\\s+',header=None,names=['action'])\n","    \n","    # 로드된 학습/테스트용 DataFrame을 모두 반환 \n","    return X_train, X_test, y_train, y_test\n","\n","\n","X_train, X_test, y_train, y_test = get_human_dataset()"],"execution_count":4,"outputs":[]},{"cell_type":"code","metadata":{"id":"sIClS5HiD4u7","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":242},"executionInfo":{"status":"error","timestamp":1597126157777,"user_tz":-540,"elapsed":733148,"user":{"displayName":"최준영","photoUrl":"","userId":"02012717858183245906"}},"outputId":"b6660b02-70e1-409d-c18f-9a8aee8225b4"},"source":["from sklearn.ensemble import GradientBoostingClassifier\n","import time\n","import warnings\n","warnings.filterwarnings('ignore')\n","\n","X_train,X_test,y_train,y_test = get_human_dataset()\n","\n","# GBM 수행 시간 측정을 위함.  시작 시간 설정.\n","start_time = time.time()\n","\n","gb_clf = GradientBoostingClassifier(random_state=0)\n","gb_clf.fit(X_train, y_train)\n","gb_pred = gb_clf.prediction(X_test)\n","gb_accuracy = accuracy_score(y_test,gb_pred)\n","\n","print('GBM 정확도 : {0:.4f}'.format(gb_accuracy))\n","print('GBM 수행시간 : {0:.1f} 초'.format(time.time() - strat_time))"],"execution_count":6,"outputs":[{"output_type":"error","ename":"AttributeError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)","\u001b[0;32m<ipython-input-6-6f7469d7d2bb>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     11\u001b[0m \u001b[0mgb_clf\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mGradientBoostingClassifier\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrandom_state\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m0\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     12\u001b[0m \u001b[0mgb_clf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_train\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0my_train\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 13\u001b[0;31m \u001b[0mgb_pred\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mgb_clf\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mprediction\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mX_test\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     14\u001b[0m \u001b[0mgb_accuracy\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0maccuracy_score\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0my_test\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mgb_pred\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     15\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mAttributeError\u001b[0m: 'GradientBoostingClassifier' object has no attribute 'prediction'"]}]},{"cell_type":"code","metadata":{"id":"SA2Ag3Y3F9x1","colab_type":"code","colab":{}},"source":["from sklearn.model_selection import GridSearchCV\n","\n","params = {\n","    'n_estimators': [100,500],\n","    'learning_rate' : [0.05, 0.1]\n","}\n","\n","grid_cv = GridSearchCV(gb_clf, param_grid = params, cv=2, verbose=1)\n","grid_cv.fit(X_train, y_train)\n","print('최적 하이퍼 파라미터 : \\n', grid_cv.best_params_)\n","print('최고 예측 정확도 : {0:.4f}'.format(grix_cv.best_score_))"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"jMsg-gFfGacx","colab_type":"code","colab":{}},"source":["# GridSeachCV를 이용해 최적으로 학습된 estimator로 예측 수행\n","gb_pred=grid_cv_estimator_.predict(X_test)\n","gb_accuracy = accuracy_score(y_test, gb_pred)\n","print('GBM 정확도 : {0:.4f}'.format(gb_accuracy))"],"execution_count":null,"outputs":[]},{"cell_type":"code","metadata":{"id":"DHftlqM0HBzh","colab_type":"code","colab":{}},"source":[""],"execution_count":null,"outputs":[]}]}